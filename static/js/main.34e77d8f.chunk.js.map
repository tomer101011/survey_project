{"version":3,"sources":["pictures/surveyPic.jpg","constants/routes.js","components/LoginPage.js","components/UserPage.js","components/UserInfo.js","components/AllSurveysPage.js","components/SurveyPage.js","components/CouponPage.js","components/AdminPage.js","components/NewCategory.js","components/AdminEditUsers.js","components/EditSurveyPage.js","classes/classes.js","components/CreateSurveyPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","USER","ADMIN","ALLSURVEYS","SURVEYPAGE","LoginPage","props","setUserName","e","setState","userName","target","value","setPassword","password","redirectToUserPage","state","isLoggedIn","to","path","areInputsBlank","someAreBlank","document","getElementById","style","border","login","foundUserIndex","findUser","whereToGo","users","role","ROUTES","localStorage","setItem","alert","usersArr","i","length","user","className","this","id","onClick","title","src","require","alt","onChange","type","placeholder","Component","UserPage","doRedirect","changePage","changePathToGo","newPath","goToAvailableCompletedSurveys","loggedUserIndex","getItem","textAlign","firstName","lastName","paddingBottom","UserInfo","done","setFirstName","setLastName","setMail","mail","updateUser","window","defaultValue","AllSurveysPage","loadSurveys","surveysArr","addSurveys","map","survey","loadCategories","searchSurveyByCategory","categories","categ","key","inputCategory","category","changeHeader","showSurvey","indexOfSurvey","pushNewLinkToSurveysArr","surveyIndex","push","surveys","name","deleted","findSurveyIdInCompletedArr","userCompletedSurveys","completedSurveys","Number","SurveyPage","addClearGoBackButtons","clearSurvey","addSubmitButton","submitSurvey","width","resultSurvey","someQuestionsNotFilled","questions","foundCheckedAns","j","answers","checked","pushCompletedSurvey","addRadioButton","indexQue","indexAns","completedArrayIndex","disabled","loadSurvey","questionsArr","answersArr","marginLeft","float","question","ans","que","CouponPage","loadCoupons","couponsArr","addCoupons","coupon","couponRedeemed","redeemCoupon","innerHTML","backgroundColor","color","AdminPage","NewCategory","newCategory","addNewCategory","setCategoryName","AdminEditUsers","loadUsersDropdown","loadUserInfo","hidden","person","userIndex","findUserbyUserName","addDataToUserInfo","tempUserName","tempFirstName","tempLastName","tempMail","EditSurveyPage","addUpdateButton","questionArr","aria-label","updateSurvey","deleteSurvey","tempSurvey","surveyIndexSelected","tempSurveyName","tempQuestionName","tempAnswerName","confirm","loadSelectedSurveyName","loadQuestionsToArr","tempQuestionsArr","tempAnswersArr","answer","clearInputs","inputs","getElementsByTagName","loadSurveyData","loadSurveysNames","User","Survey","Question","CreateSurveyPage","surveyName","newSurveyId","addSurvey","addQuestion","questionName","answerArr","tempQuestionArr","addAnswer","answerName","tempAnswerArr","setSurveyName","setQuestion","setAnswer","aria-describedby","App","updatedSurvey","tempSurveys","indexUser","tempUsers","checkedSurvey","indexSurvey","surveyId","tempCategories","exact","render","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,uC,uPCC9BC,EAAO,QACPC,EAAQ,SAIRC,EAAa,cACbC,EAAa,cCHLC,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA8CVC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEC,SAAUF,EAAEG,OAAOC,SAhDpB,EAmDnBC,YAAc,SAACL,GACX,EAAKC,SAAS,CAAEK,SAAUN,EAAEG,OAAOC,SApDpB,EAuDnBG,mBAAqB,WACjB,GAAI,EAAKC,MAAMC,WACX,OAAO,kBAAC,IAAD,CAAUC,GAAI,EAAKF,MAAMG,QAzDrB,EA4DnBC,eAAiB,WACb,IAAIC,GAAe,EAgBnB,MAd4B,KAAxB,EAAKL,MAAMN,UACXY,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAE3B,KAAxB,EAAKT,MAAMF,UACXQ,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAEhDJ,GA7EQ,EAgFnBK,MAAQ,WACJ,IAAK,EAAKN,iBAAkB,CACxB,IAAIO,EAAiB,EAAKC,WACtBC,EAAY,IACQ,IAApBF,GAEIE,EAD0C,SAA1C,EAAKvB,MAAMwB,MAAMH,GAAgBI,KACrBC,EAEAA,EAEhBC,aAAaC,QAAQ,kBAAmBP,GACxC,EAAKlB,SAAS,CAAEU,KAAMU,EAAWZ,YAAY,KAG7CkB,MAAM,yCA9FC,EAkGnBP,SAAW,WAEP,IADA,IAAIQ,EAAW,EAAK9B,MAAMwB,MACjBO,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACjC,GAAI,EAAKrB,MAAMN,WAAa0B,EAASC,GAAGE,MAAQ,EAAKvB,MAAMF,WAAasB,EAASC,GAAGvB,SAChF,OAAOuB,EAEf,OAAQ,GAtGR,EAAKrB,MAAQ,CACTN,SAAU,GACVI,SAAU,GACVK,KAAM,GACNF,YAAY,GAND,E,sEAUT,IAAD,OACL,OACI,yBAAKuB,UAAU,aACVC,KAAK1B,qBACN,yBAAK2B,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,gBAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKG,QAAS,kBAAM,EAAKjB,SAASc,UAAU,YAAYI,MAAM,QAAQC,IAAKC,EAAQ,IAA8BC,IAAI,OAG7H,yBAAKP,UAAU,kBACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAKlC,YAAaiC,UAAU,aAAaS,KAAK,OAAOC,YAAY,gBAGxG,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAK5B,YAAa2B,UAAU,aAAaS,KAAK,WAAWC,YAAY,eAG5G,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAKjB,SAASc,UAAU,oCAA/C,kB,GAxCOW,aCAlBC,E,YAEjB,WAAY9C,GAAQ,IAAD,8BACf,4CAAMA,KAoEV+C,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAvErB,EA0EnBoC,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KA3E5B,EA8EnBG,8BAAgC,SAAC5B,GACX,cAAdA,EACAI,aAAaC,QAAQ,YAAa,aAElCD,aAAaC,QAAQ,YAAa,aAEtC,EAAKqB,eAAevB,IAlFpB,EAAKhB,MAAQ,CACT0C,gBAAiBzB,aAAa0B,QAAQ,mBACtCxC,KAAM,GACNmC,YAAY,GALD,E,sEAST,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,SACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eFvB9E,OEuBW,eAEJ,yBAAK/B,MAAO,CAAEoC,UAAW,SAAWpB,UAAU,SAC1C,wBAAIA,UAAU,2BAA2BC,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiB3B,QAG9F,yBAAKS,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,WAAuCC,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiBG,UAApF,IAAgGpB,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiBI,YAGrJ,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,gBAAd,gCAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,cAAd,aAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKc,8BAA8B,eAAjF,uBAGR,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKc,8BAA8B,eAAjF,uBAGR,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eFpDzD,iBEoDM,oBAGR,yBAAKf,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,cAAd,eAGR,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,UAC7C,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eF7D1D,eE6DO,2B,GA9DMJ,aCAjBa,E,YAEjB,WAAY1D,GAAQ,IAAD,8BACf,4CAAMA,KA0DVS,mBAAqB,WACjB,GAAI,EAAKC,MAAMiD,KACX,OAAO,kBAAC,IAAD,CAAU/C,GAAIc,KA7DV,EAgEnBzB,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEC,SAAUF,EAAEG,OAAOC,SAjEpB,EAoEnBsD,aAAe,SAAC1D,GACZ,EAAKC,SAAS,CAAEoD,UAAWrD,EAAEG,OAAOC,SArErB,EAwEnBuD,YAAc,SAAC3D,GACX,EAAKC,SAAS,CAAEqD,SAAUtD,EAAEG,OAAOC,SAzEpB,EA4EnBwD,QAAU,SAAC5D,GACP,EAAKC,SAAS,CAAE4D,KAAM7D,EAAEG,OAAOC,SA7EhB,EAgFnBQ,eAAiB,WACb,IAAIC,GAAe,EA8BnB,MA5B4B,KAAxB,EAAKL,MAAMN,UACXY,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAE1B,KAAzB,EAAKT,MAAM6C,WACXvC,SAASC,eAAe,aAAaC,MAAMC,OAAS,gBACpDJ,GAAe,GAGfC,SAASC,eAAe,aAAaC,MAAMC,OAAS,OAE5B,KAAxB,EAAKT,MAAM8C,UACXxC,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAE/B,KAApB,EAAKT,MAAMqD,MACX/C,SAASC,eAAe,QAAQC,MAAMC,OAAS,gBAC/CJ,GAAe,GAGfC,SAASC,eAAe,QAAQC,MAAMC,OAAS,OAE5CJ,GA/GQ,EAkHnBiD,WAAa,WACJ,EAAKlD,mBACN,EAAKd,MAAMgE,WAAW,EAAKtD,MAAM0C,gBAAiB,EAAK1C,MAAMN,SAAU,EAAKM,MAAM6C,UAAW,EAAK7C,MAAM8C,SAAU,EAAK9C,MAAMqD,MAC7HlC,MAAM,mCACN,EAAK1B,SAAS,CAAEwD,MAAM,MApH1B,EAAKjD,MAAQ,CACTN,SAAU,EAAKJ,MAAMwB,MAAMyC,OAAOtC,aAAa0B,QAAQ,oBAAoBpB,KAC3EsB,UAAW,EAAKvD,MAAMwB,MAAMyC,OAAOtC,aAAa0B,QAAQ,oBAAoBE,UAC5EC,SAAU,EAAKxD,MAAMwB,MAAMyC,OAAOtC,aAAa0B,QAAQ,oBAAoBG,SAC3EO,KAAM,EAAK/D,MAAMwB,MAAMyC,OAAOtC,aAAa0B,QAAQ,oBAAoBU,KACvEX,gBAAiBa,OAAOtC,aAAa0B,QAAQ,mBAC7CM,MAAM,GARK,E,sEAYT,IAAD,OACL,OACI,yBAAKzB,UAAU,aACVC,KAAK1B,qBACN,yBAAK2B,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKlC,SAAS,CAAEwD,MAAM,MAApF,aAGR,yBAAKzB,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,oBAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAKlC,YAAaiE,aAAc/B,KAAKzB,MAAMN,SAAU8B,UAAU,aAAaS,KAAK,OAAOC,YAAY,gBAG3I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,YAAYM,SAAUP,KAAKyB,aAAcM,aAAc/B,KAAKzB,MAAM6C,UAAWrB,UAAU,aAAaS,KAAK,OAAOC,YAAY,iBAG9I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAK0B,YAAaK,aAAc/B,KAAKzB,MAAM8C,SAAUtB,UAAU,aAAaS,KAAK,OAAOC,YAAY,gBAG3I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,OAAOM,SAAUP,KAAK2B,QAASI,aAAc/B,KAAKzB,MAAMqD,KAAM7B,UAAU,aAAaS,KAAK,OAAOC,YAAY,WAG/H,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK2B,cAAc9B,UAAU,iCAApD,6B,GApDMW,aCAjBsB,E,YAEjB,WAAYnE,GAAQ,IAAD,8BACf,4CAAMA,KAmCVoE,YAAc,WACV,IAAIC,EAAa,EAAKC,aACtB,OAA0B,IAAtBD,EAAWrC,OAEP,yBAAKE,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,gBAAd,wBAMLmC,EAAWE,KAAI,SAAAC,GAAY,OAAOA,MAhD9B,EAmDnBC,eAAiB,WACb,OACI,4BAAQrC,GAAG,WAAWM,SAAU,kBAAM,EAAKgC,2BACvC,kDACC,EAAK1E,MAAM2E,WAAWJ,KAAI,SAACK,EAAO7C,GAAQ,OAAO,4BAAQ8C,IAAK9C,GAAI6C,QAvD5D,EA4DnBF,uBAAyB,WACrB,IAAII,EAAgB9D,SAASC,eAAe,YAAYX,MACxD,EAAKH,SAAS,CAAE4E,SAAUD,KA9DX,EAiEnB7B,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KAlE5B,EAqEnBD,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAvErB,EA0EnBmE,aAAe,WACX,MAA0C,cAAtCrD,aAAa0B,QAAQ,aACb,wBAAInB,UAAU,iBAAd,qBAEJ,wBAAIA,UAAU,iBAAd,sBA9EO,EAiFnB+C,WAAa,SAACC,GACVvD,aAAaC,QAAQ,gBAAiBsD,GACtC,EAAKjC,eAAevB,IAnFL,EAsFnByD,wBAA0B,SAACd,EAAYe,GACnCf,EAAWgB,KACP,yBAAKR,IAAKO,EAAalD,UAAU,OAC7B,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK4C,WAAWG,IAAclD,UAAU,cAAe,EAAKlC,MAAMsF,QAAQF,GAAaG,UA1F3G,EAgGnBjB,WAAa,WACT,IAAID,EAAa,GAEjB,GAAoB,cADF1C,aAAa0B,QAAQ,aAEnC,IAAK,IAAItB,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQtD,OAAQD,IACtC,EAAK/B,MAAMsF,QAAQvD,GAAGyD,UACkD,IAArE,EAAKxF,MAAMyF,2BAA2B,EAAKzF,MAAMsF,QAAQvD,GAAGK,MAChC,mBAAxB,EAAK1B,MAAMqE,SACX,EAAKI,wBAAwBd,EAAYtC,GAEpC,EAAK/B,MAAMsF,QAAQvD,GAAGgD,WAAa,EAAKrE,MAAMqE,UACnD,EAAKI,wBAAwBd,EAAYtC,SAOzD,IADA,IAAI2D,EAAuB,EAAK1F,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAC/D5D,EAAI,EAAGA,EAAI2D,EAAqB1D,OAAQD,IACjB,mBAAxB,EAAKrB,MAAMqE,SACX,EAAKI,wBAAwBd,EAAYqB,EAAqB3D,GAAGmD,eAE5D,EAAKlF,MAAMsF,QAAQvD,GAAGgD,WAAa,EAAKrE,MAAMqE,UACnD,EAAKI,wBAAwBd,EAAYqB,EAAqB3D,GAAGmD,eAK7E,OAAOb,GA1HP,EAAK3D,MAAQ,CACTqE,SAAU,iBACV3B,gBAAiBwC,OAAOjE,aAAa0B,QAAQ,oBAC7CxC,KAAM,GACNmC,YAAY,GAND,E,sEAUT,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,SACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,YAEJ,yBAAKR,MAAO,CAAEoC,UAAW,SAAWpB,UAAU,SACzCC,KAAKsC,mBAGd,yBAAKvC,UAAU,OACX,yBAAKA,UAAU,UACVC,KAAK6C,iBAGb7C,KAAKiC,qB,GA/BcvB,aCAvBgD,E,YACjB,WAAY7F,GAAQ,IAAD,8BACf,4CAAMA,KA6BV8F,sBAAwB,WACpB,MAA0C,cAAtCnE,aAAa0B,QAAQ,aAEjB,yBAAKnB,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,SACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,YAEJ,yBAAKR,MAAO,CAAEoC,UAAW,SAAWpB,UAAU,SAC1C,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAK0D,gBAAnE,kBAMR,yBAAK7D,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,cA9CD,EAqDnBsE,gBAAkB,WACd,GAA0C,cAAtCrE,aAAa0B,QAAQ,aACrB,OACI,yBAAKnB,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK4D,gBAAgB/E,MAAO,CAAEgF,MAAO,OAAShE,UAAU,gBAA/E,aA1DD,EAgEnB+D,aAAe,WAGX,IAFA,IAAIE,EAAe,GACfC,GAAyB,EACpBrE,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUrE,SAAWoE,EAAwBrE,IAAK,CAE/G,IADA,IAAIuE,GAAkB,EACbC,EAAI,EAAGA,EAAI,EAAKvG,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUtE,GAAGyE,QAAQxE,SAAWsE,EAAiBC,IAC1GvF,SAASC,eAAe,IAAMc,EAAIwE,GAAGE,UACrCN,EAAad,KAAKkB,GAClBD,GAAkB,GAGrBA,IACDzE,MAAM,yCACNuE,GAAyB,GAG5BA,IACD,EAAKpG,MAAM0G,oBAAoBP,EAAc,EAAKzF,MAAM0C,gBAAiB,EAAK1C,MAAMwE,eACpFrD,MAAM,qCACN,EAAKoB,eAAevB,KAnFT,EAuFnBqE,YAAc,WACV,IAAK,IAAIhE,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUrE,OAAQD,IAC/E,IAAK,IAAIwE,EAAI,EAAGA,EAAI,EAAKvG,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUtE,GAAGyE,QAAQxE,OAAQuE,IAC1FvF,SAASC,eAAe,IAAMc,EAAIwE,GAAGE,SAAU,GA1FxC,EA6FnBxD,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KA9F5B,EAiGnBD,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAnGrB,EAsGnB8F,eAAiB,SAACC,EAAUC,GAExB,GAA8B,cADFlF,aAAa0B,QAAQ,aACN,CACvC,IAAIyD,EAAsB,EAAK9G,MAAMyF,2BAA2B,EAAK/E,MAAMwE,eAC3E,OAAI,EAAKlF,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiBmB,GAAqBX,aAAaS,KAAcC,EACtG,2BAAOlE,KAAK,QAAQ8D,SAAO,EAACM,UAAQ,EAACxB,KAAM,IAAMqB,EAAUxE,GAAI,IAAMwE,EAAWC,IAE/E,2BAAOlE,KAAK,QAAQoE,UAAQ,EAACxB,KAAM,IAAMqB,EAAUxE,GAAI,IAAMwE,EAAWC,IAIrF,OAAQ,2BAAOlE,KAAK,QAAQ4C,KAAM,IAAMqB,EAAUxE,GAAI,IAAMwE,EAAWC,KAjH5D,EAqHnBG,WAAa,WAET,IADA,IAAIC,EAAe,GACVlF,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUrE,OAAQD,IAAK,CAEpF,IADA,IAAImF,EAAa,GACRX,EAAI,EAAGA,EAAI,EAAKvG,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUtE,GAAGyE,QAAQxE,OAAQuE,IAC1FW,EAAW7B,KACP,yBAAKR,IAAK0B,EAAGrE,UAAU,OACnB,yBAAKhB,MAAO,CAAEiG,WAAY,SAAWjF,UAAU,UAC3C,2BAAOhB,MAAO,CAAEkG,MAAO,SACnB,+BACI,4BACI,wBAAIlF,UAAU,iBACT,EAAKyE,eAAe5E,EAAGwE,OAKxC,2BAAOrF,MAAO,CAAEkG,MAAO,WACnB,+BACI,4BACI,4BACI,wBAAIlF,UAAU,UAAU,EAAKlC,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUtE,GAAGyE,QAAQD,WAS1HU,EAAa5B,KACT,yBAAKR,IAAK9C,GACN,yBAAKG,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,qBAAqB,EAAKlC,MAAMsF,QAAQ,EAAK5E,MAAMwE,eAAemB,UAAUtE,GAAGsF,YAGpGH,EAAW3C,KAAI,SAAA+C,GAAS,OAAOA,OAI5C,OAAOL,GA5JP,EAAKvG,MAAQ,CACTwE,cAAeU,OAAOjE,aAAa0B,QAAQ,kBAC3CD,gBAAiBwC,OAAOjE,aAAa0B,QAAQ,oBAC7CxC,KAAM,GACNmC,YAAY,GAND,E,sEAWf,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,YAAYF,UAAU,kBAC1B,yBAAKA,UAAU,UACVC,KAAK2D,wBACN,yBAAK5D,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAiBC,KAAKnC,MAAMsF,QAAQnD,KAAKzB,MAAMwE,eAAeK,QAGnFpD,KAAK6E,aAAazC,KAAI,SAAAgD,GAAS,OAAOA,KACtCpF,KAAK6D,yB,GAxBUnD,aCAnB2E,E,YAEjB,WAAYxH,GAAQ,IAAD,8BACf,4CAAMA,KA+BVyH,YAAc,WACV,IAAIC,EAAa,EAAKC,aACtB,OAA0B,IAAtBD,EAAW1F,OAEP,yBAAKE,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,gBAAd,wBAMLwF,EAAWnD,KAAI,SAAAqD,GAAY,OAAOA,MA5C9B,EA+CnBD,WAAa,WAET,IADA,IAAID,EAAa,GADF,WAEN3F,GACD,EAAK/B,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB5D,GAAG8F,eACjEH,EAAWrC,KACP,yBAAKR,IAAK9C,EAAGG,UAAU,OACnB,yBAAKA,UAAU,UACX,4BAAQE,GAAG,iBAAiBF,UAAU,eAAe6E,UAAQ,GAA7D,UAAuE,EAAK/G,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB5D,GAAGmD,cAAgB,EAAxJ,kBAMZwC,EAAWrC,KACP,yBAAKR,IAAK9C,EAAGG,UAAU,OACnB,yBAAKA,UAAU,UACX,4BAAQA,UAAU,eAAeE,GAAI,IAAML,EAAGM,QAAS,kBAAM,EAAKyF,aAAa/F,KAA/E,wBAAyG,EAAK/B,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB5D,GAAGmD,cAAgB,OAdrMnD,EAAI,EAAGA,EAAI,EAAK/B,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB3D,OAAQD,IAAM,EAAvFA,GAoBT,OAAO2F,GArEQ,EAwEnBI,aAAe,SAAC/F,GACZ,EAAK/B,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB5D,GAAG8F,gBAAiB,EAClF7G,SAASC,eAAe,IAAMc,GAAGgF,UAAW,EAC5C/F,SAASC,eAAe,IAAMc,GAAGgG,UAAY,WAAa,EAAK/H,MAAMwB,MAAM,EAAKd,MAAM0C,iBAAiBuC,iBAAiB5D,GAAGmD,cAAgB,GAAK,cAChJlE,SAASC,eAAe,IAAMc,GAAGb,MAAM8G,gBAAkB,UACzDhH,SAASC,eAAe,IAAMc,GAAGb,MAAM+G,MAAQ,SA7EhC,EAgFnBhF,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KAjF5B,EAoFnBD,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QApFpC,EAAKH,MAAQ,CACTG,KAAM,GACNmC,YAAY,EACZI,gBAAiBzB,aAAa0B,QAAQ,oBAL3B,E,sEAST,IAAD,OACL,OACI,yBAAKnB,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,aAGR,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,mBAGPC,KAAKsF,qB,GA3BU5E,aCAnBqF,E,YAEjB,WAAYlI,GAAQ,IAAD,8BACf,4CAAMA,KA8EV+C,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAjFrB,EAoFnBoC,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KAnF3C,EAAKtC,MAAQ,CACT0C,gBAAiBzB,aAAa0B,QAAQ,mBACtCxC,KAAM,GACNmC,YAAY,GALD,E,sEAST,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,SACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,ePvB9E,OOuBW,eAEJ,yBAAK/B,MAAO,CAAEoC,UAAW,SAAWpB,UAAU,SAC1C,wBAAIA,UAAU,2BAA2BC,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiB3B,QAG9F,yBAAKS,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,WAAuCC,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiBG,UAApF,IAAgGpB,KAAKnC,MAAMwB,MAAMW,KAAKzB,MAAM0C,iBAAiBI,YAGrJ,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,gBAAd,gCAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,cAAd,aAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,ePnCvD,uBOmCI,uBAGR,yBAAKf,UAAU,OACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,ePzCzD,qBOyCM,kBAGR,yBAAKf,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,cAAd,WAGR,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,UAC7C,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,ePpDnD,qBOoDA,gBAGR,yBAAKf,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,cAAd,gBAGR,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,UAC7C,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eP/DvD,kBO+DI,sBAGR,yBAAKf,UAAU,OACX,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,UAC7C,4BAAQA,UAAU,aAAaG,QAAS,kBAAM,IAA9C,2B,GAxEOQ,aCAlBsF,E,YAEjB,WAAYnI,GAAQ,IAAD,8BACf,4CAAMA,KAuCVc,eAAiB,WACb,IAAIC,GAAe,EASnB,MAP+B,KAA3B,EAAKL,MAAM0H,aACXpH,SAASC,eAAe,gBAAgBC,MAAMC,OAAS,gBACvDJ,GAAe,GAGfC,SAASC,eAAe,gBAAgBC,MAAMC,OAAS,OAEpDJ,GAlDQ,EAqDnBsH,eAAiB,WACR,EAAKvH,mBACN,EAAKd,MAAMqI,eAAe,EAAK3H,MAAM0H,aACrCvG,MAAM,uBACN,EAAKoB,eAAevB,KAzDT,EA6DnB4G,gBAAkB,SAACpI,GACf,EAAKC,SAAS,CAAEiI,YAAalI,EAAEG,OAAOC,SA9DvB,EAiEnByC,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAnErB,EAsEnBoC,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KArE3C,EAAKtC,MAAQ,CACT0H,YAAa,GACbvH,KAAM,GACNmC,YAAY,GALD,E,sEAQT,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,aAGR,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,sBAGR,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,eAAelB,MAAO,CAAEgF,MAAO,OAASxD,SAAUP,KAAKmG,gBAAiBpG,UAAU,aAAaS,KAAK,OAAOC,YAAY,oBAGzI,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQhB,MAAO,CAAEgF,MAAO,OAAS7D,QAAS,kBAAM,EAAKgG,kBAAkBnG,UAAU,qCAAjF,6B,GAjCSW,aCApB0F,E,YAEjB,WAAYvI,GAAQ,IAAD,8BACf,4CAAMA,KA+DVwI,kBAAoB,WAChB,OACI,4BAAQpG,GAAG,gBAAgBM,SAAU,kBAAM,EAAK+F,iBAC5C,4BAAQC,QAAM,GAAd,eACC,EAAK1I,MAAMwB,MAAM+C,KAAI,SAACoE,EAAQ5G,GAAQ,OAAO,4BAAQ8C,IAAK9C,GAAI4G,EAAO1G,WApE/D,EAyEnBwG,aAAe,WACX,IAAIrI,EAAWY,SAASC,eAAe,iBAAiBX,MACxD,EAAKH,SAAS,CAAEyI,UAAW,EAAKC,mBAAmBzI,KAAa,kBAAM,EAAK0I,wBA3E5D,EA8EnBA,kBAAoB,WAChB,IAAIC,EAAe,EAAK/I,MAAMwB,MAAM,EAAKd,MAAMkI,WAAW3G,KACtD+G,EAAgB,EAAKhJ,MAAMwB,MAAM,EAAKd,MAAMkI,WAAWrF,UACvD0F,EAAe,EAAKjJ,MAAMwB,MAAM,EAAKd,MAAMkI,WAAWpF,SACtD0F,EAAW,EAAKlJ,MAAMwB,MAAM,EAAKd,MAAMkI,WAAW7E,KAEtD/C,SAASC,eAAe,YAAYX,MAAQyI,EAC5C/H,SAASC,eAAe,aAAaX,MAAQ0I,EAC7ChI,SAASC,eAAe,YAAYX,MAAQ2I,EAC5CjI,SAASC,eAAe,QAAQX,MAAQ4I,EAExClI,SAASC,eAAe,YAAYC,MAAMC,OAAS,OACnDH,SAASC,eAAe,aAAaC,MAAMC,OAAS,OACpDH,SAASC,eAAe,YAAYC,MAAMC,OAAS,OACnDH,SAASC,eAAe,QAAQC,MAAMC,OAAS,OAE/C,EAAKhB,SAAS,CAAEC,SAAU2I,EAAcxF,UAAWyF,EAAexF,SAAUyF,EAAclF,KAAMmF,KA9FjF,EAmGnBL,mBAAqB,SAACzI,GAClB,IAAK,IAAI2B,EAAI,EAAGA,EAAI,EAAK/B,MAAMwB,MAAMQ,OAAQD,IACzC,GAAI,EAAK/B,MAAMwB,MAAMO,GAAGE,OAAS7B,EAC7B,OAAO2B,EACf,OAAQ,GAvGO,EA0GnBiC,WAAa,WAC8C,gBAAnDhD,SAASC,eAAe,iBAAiBX,MACzCuB,MAAM,6BAEA,EAAKf,mBACX,EAAKd,MAAMgE,WAAW,EAAKtD,MAAMkI,UAAW,EAAKlI,MAAMN,SAAU,EAAKM,MAAM6C,UAAW,EAAK7C,MAAM8C,SAAU,EAAK9C,MAAMqD,MACvHlC,MAAM,qCAhHK,EAoHnBkB,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAtHrB,EAyHnBoC,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KA1H5B,EA6HnB/C,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEC,SAAUF,EAAEG,OAAOC,SA9HpB,EAiInBsD,aAAe,SAAC1D,GACZ,EAAKC,SAAS,CAAEoD,UAAWrD,EAAEG,OAAOC,SAlIrB,EAqInBuD,YAAc,SAAC3D,GACX,EAAKC,SAAS,CAAEqD,SAAUtD,EAAEG,OAAOC,SAtIpB,EAyInBwD,QAAU,SAAC5D,GACP,EAAKC,SAAS,CAAE4D,KAAM7D,EAAEG,OAAOC,SA1IhB,EA6InBQ,eAAiB,WACb,IAAIC,GAAe,EA8BnB,MA5B4B,KAAxB,EAAKL,MAAMN,UACXY,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAE1B,KAAzB,EAAKT,MAAM6C,WACXvC,SAASC,eAAe,aAAaC,MAAMC,OAAS,gBACpDJ,GAAe,GAGfC,SAASC,eAAe,aAAaC,MAAMC,OAAS,OAE5B,KAAxB,EAAKT,MAAM8C,UACXxC,SAASC,eAAe,YAAYC,MAAMC,OAAS,gBACnDJ,GAAe,GAGfC,SAASC,eAAe,YAAYC,MAAMC,OAAS,OAE/B,KAApB,EAAKT,MAAMqD,MACX/C,SAASC,eAAe,QAAQC,MAAMC,OAAS,gBAC/CJ,GAAe,GAGfC,SAASC,eAAe,QAAQC,MAAMC,OAAS,OAE5CJ,GA1KP,EAAKL,MAAQ,CACTkI,WAAY,EACZxI,SAAU,GACVmD,UAAW,GACXC,SAAU,GACVO,KAAM,GACNlD,KAAM,GACNmC,YAAY,GATD,E,sEAYT,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,aAGR,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,gBAGR,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,OAC7C,yBAAKA,UAAU,UACVC,KAAKqG,sBAGd,yBAAKtG,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAKlC,YAAaiE,aAAc/B,KAAKzB,MAAMN,SAAU8B,UAAU,aAAaS,KAAK,OAAOC,YAAY,gBAG3I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,YAAYM,SAAUP,KAAKyB,aAAcM,aAAc/B,KAAKzB,MAAM6C,UAAWrB,UAAU,aAAaS,KAAK,OAAOC,YAAY,iBAG9I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,WAAWM,SAAUP,KAAK0B,YAAaK,aAAc/B,KAAKzB,MAAM8C,SAAUtB,UAAU,aAAaS,KAAK,OAAOC,YAAY,gBAG3I,yBAAKV,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,OAAOM,SAAUP,KAAK2B,QAASI,aAAc/B,KAAKzB,MAAMqD,KAAM7B,UAAU,aAAaS,KAAK,OAAOC,YAAY,WAG/H,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK2B,cAAc9B,UAAU,iCAApD,wB,GAzDYW,aCAvBsG,E,YACjB,WAAYnJ,GAAQ,IAAD,8BACf,4CAAMA,KAgDVoJ,gBAAkB,WACd,GAAsC,IAAlC,EAAK1I,MAAM2I,YAAYrH,OACvB,OACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,YAAYT,KAAK,QAAQ6H,aAAW,iBAC/C,4BAAQjH,QAAS,kBAAM,EAAKkH,gBAAgBrH,UAAU,gBAAtD,iBACA,4BAAQG,QAAS,kBAAM,EAAKmH,gBAAgBtH,UAAU,kBAAtD,cAxDL,EAgEnBqH,aAAe,WACX,IAAIE,EAAa,EAAKzJ,MAAMsF,QAAQ,EAAK5E,MAAMgJ,qBAE3CC,EAAiB3I,SAASC,eAAe,gBAAgBX,MACtC,KAAnBqJ,IACAF,EAAWlE,KAAOoE,GAEtB,IAAK,IAAI5H,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQ,EAAK5E,MAAMgJ,qBAAqBrD,UAAUrE,OAAQD,IAAK,CAC1F,IAAI6H,EAAmB5I,SAASC,eAAe,IAAMc,GAAGzB,MAC/B,KAArBsJ,IACAH,EAAWpD,UAAUtE,GAAGsF,SAAWuC,GAEvC,IAAK,IAAIrD,EAAI,EAAGA,EAAI,EAAKvG,MAAMsF,QAAQ,EAAK5E,MAAMgJ,qBAAqBrD,UAAUtE,GAAGyE,QAAQxE,OAAQuE,IAAK,CACrG,IAAIsD,EAAiB7I,SAASC,eAAe,IAAMc,EAAIwE,GAAGjG,MACnC,KAAnBuJ,IACAJ,EAAWpD,UAAUtE,GAAGyE,QAAQD,GAAKsD,IAGjD,EAAK7J,MAAMuJ,aAAaE,EAAY,EAAK/I,MAAMgJ,qBAC/C,EAAKvJ,SAAS,CAAEkJ,YAAa,GAAIK,qBAAsB,IACvD7H,MAAM,iCApFS,EAuFnB2H,aAAe,WACPvF,OAAO6F,QAAQ,uCACf,EAAK9J,MAAMwJ,aAAa,EAAK9I,MAAMgJ,qBACnC,EAAKvJ,SAAS,CAAEkJ,YAAa,GAAIK,qBAAsB,MA1F5C,EA8FnBK,uBAAyB,WACrB,IAAwC,IAApC,EAAKrJ,MAAMgJ,oBACX,OACI,yBAAKxH,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,eAAeF,UAAU,YAAYU,YAAa,EAAK5C,MAAMsF,QAAQ,EAAK5E,MAAMgJ,qBAAqBnE,UAnGhH,EAyGnByE,mBAAqB,SAAC5E,GAElB,IADA,IAAI6E,EAAmB,GACdlI,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQF,GAAaiB,UAAUrE,OAAQD,IAAK,CAGvE,IAFA,IAAImI,EAAiB,GAEZ3D,EAAI,EAAGA,EAAI,EAAKvG,MAAMsF,QAAQF,GAAaiB,UAAUtE,GAAGyE,QAAQxE,OAAQuE,IAAK,CAClF,IAAI4D,EAAS,EAAKnK,MAAMsF,QAAQF,GAAaiB,UAAUtE,GAAGyE,QAAQD,GAClE2D,EAAe7E,KACX,yBAAKR,IAAK0B,EAAGrE,UAAU,OACnB,yBAAKA,UAAU,sBACX,2BAAOE,GAAI,IAAML,EAAIwE,EAAG5D,KAAK,OAAOC,YAAauH,EAAQjI,UAAU,mBAKnF,IAAImF,EAAW,EAAKrH,MAAMsF,QAAQF,GAAaiB,UAAUtE,GAAGsF,SAC5D4C,EAAiB5E,KACb,yBAAKR,IAAK9C,GACN,yBAAKG,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAI,IAAML,EAAGY,KAAK,OAAOC,YAAayE,EAAUnF,UAAU,oBAGxEgI,EAAe3F,KAAI,SAAA+C,GAAS,OAAOA,OAIhD,EAAK8C,cACL,EAAKjK,SAAS,CAAEkJ,YAAaY,EAAkBP,oBAAqBtE,KArIrD,EAwInBgF,YAAc,WAEV,IADA,IAAIC,EAASrJ,SAASsJ,qBAAqB,SAClCvI,EAAI,EAAGA,EAAIsI,EAAOrI,OAAQD,IAC/BsI,EAAOtI,GAAGzB,MAAQ,IA3IP,EA+InBiK,eAAiB,WACb,OAAsC,IAAlC,EAAK7J,MAAM2I,YAAYrH,OAEnB,wBAAIE,UAAU,2BAAd,2BAGI,EAAKxB,MAAM2I,YAAY9E,KAAI,SAAA8C,GAAc,OAAOA,MArJ7C,EAwJnBmD,iBAAmB,SAACzF,GAEhB,IADA,IAAIV,EAAa,GACRtC,EAAI,EAAGA,EAAI,EAAK/B,MAAMsF,QAAQtD,OAAQD,IACtC,EAAK/B,MAAMsF,QAAQvD,GAAGyD,UACN,mBAAbT,EACA,EAAKI,wBAAwBd,EAAYtC,GAEpC,EAAK/B,MAAMsF,QAAQvD,GAAGgD,WAAaA,GACxC,EAAKI,wBAAwBd,EAAYtC,IAGrD,OAAOsC,GAnKQ,EAsKnBc,wBAA0B,SAACd,EAAYe,GACnCf,EAAWgB,KACP,yBAAKR,IAAKO,EAAalD,UAAU,OAC7B,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK2H,mBAAmB5E,IAAclD,UAAU,cAAe,EAAKlC,MAAMsF,QAAQF,GAAaG,UA1KnH,EAgLnBd,eAAiB,WACb,OACI,4BAAQrC,GAAG,WAAWM,SAAU,kBAAM,EAAKgC,2BACvC,kDACC,EAAK1E,MAAM2E,WAAWJ,KAAI,SAACK,EAAO7C,GAAQ,OAAO,4BAAQ8C,IAAK9C,GAAI6C,QApL5D,EAyLnBF,uBAAyB,WACrB,IAAII,EAAgB9D,SAASC,eAAe,YAAYX,MACxD,EAAKH,SAAS,CAAE4E,SAAUD,KA3LX,EA8LnB7B,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KA/L5B,EAkMnBD,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QAlMpC,EAAKH,MAAQ,CACTqE,SAAU,iBACVsE,YAAa,GACbK,qBAAsB,EACtB7I,KAAM,GACNmC,YAAY,GAPD,E,sEAUT,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,gBAAgBF,UAAU,kBAC9B,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,aAGR,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,kBAGR,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,SACVC,KAAK4H,yBACL5H,KAAKoI,kBAGV,yBAAKrI,UAAU,SACX,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,OAC7C,yBAAKA,UAAU,UACVC,KAAKsC,mBAGbtC,KAAKqI,iBAAiBrI,KAAKzB,MAAMqE,UAAUR,KAAI,SAAAC,GAAY,OAAOA,OAG1ErC,KAAKiH,yB,GA3CcvG,aCJ/B4H,EAST,WAAYxI,EAAMsB,EAAWC,EAAUhD,EAAUuD,EAAMtC,GAAO,yBAF9DkE,iBAAmB,GAGfxD,KAAKF,KAAOA,EACZE,KAAKoB,UAAYA,EACjBpB,KAAKqB,SAAWA,EAChBrB,KAAK3B,SAAWA,EAChB2B,KAAK4B,KAAOA,EACZ5B,KAAKV,KAAOA,GAIPiJ,EAOT,WAAYtI,EAAImD,EAAMR,EAAUsB,GAAY,yBAF5CA,UAAY,GAGRlE,KAAKC,GAAKA,EACVD,KAAKoD,KAAOA,EACZpD,KAAK4C,SAAWA,EAChB5C,KAAKkE,UAAYA,EACjBlE,KAAKqD,SAAU,GAIVmF,EAIT,WAAYtD,EAAUb,GAAU,yBAFhCA,QAAU,GAGNrE,KAAKkF,SAAWA,EAChBlF,KAAKqE,QAAUA,GCpCFoE,E,YACjB,WAAY5K,GAAQ,IAAD,8BACf,4CAAMA,KAkEViG,aAAe,WACX,GAA8B,KAA1B,EAAKvF,MAAMmK,WACX7J,SAASC,eAAe,cAAcC,MAAMC,OAAS,oBAEpD,CACDH,SAASC,eAAe,cAAcC,MAAMC,OAAS,OACrD,IAAI4D,EAAW/D,SAASC,eAAe,YAAYX,MACnD,GAAiB,oBAAbyE,EACAlD,MAAM,sCAEL,GAAsC,IAAlC,EAAKnB,MAAM2I,YAAYrH,OAC5BH,MAAM,kDAEL,CACD,IAAIiJ,EAEAA,EADsB,IAAtB,EAAK9K,MAAMgC,OACG,EAEA,EAAKhC,MAAMsF,QAAQ,EAAKtF,MAAMsF,QAAQtD,OAAS,GAAGI,GAAK,EAEzE,IAAIoC,EAAS,IAAIkG,EAAOI,EAAa,EAAKpK,MAAMmK,WAAY9F,EAAU,EAAKrE,MAAM2I,aACjF,EAAKrJ,MAAM+K,UAAUvG,GACrBxD,SAASC,eAAe,cAAcX,MAAQ,GAC9CuB,MAAM,8BACN,EAAK1B,SAAS,CAAE0K,WAAY,GAAIxB,YAAa,QA3FtC,EAiGnB2B,YAAc,WACV,GAAgC,KAA5B,EAAKtK,MAAMuK,aACXjK,SAASC,eAAe,gBAAgBC,MAAMC,OAAS,qBAIvD,GADAH,SAASC,eAAe,gBAAgBC,MAAMC,OAAS,oBACnD,EAAKT,MAAMwK,UAAUlJ,QAAU,EAC/BH,MAAM,yDAEL,CACD,IAAIwF,EAAW,IAAIsD,EAAS,EAAKjK,MAAMuK,aAAc,EAAKvK,MAAMwK,WAC5DC,EAAkB,EAAKzK,MAAM2I,YACjC8B,EAAgB9F,KAAKgC,GACrBrG,SAASC,eAAe,gBAAgBX,MAAQ,GAChDuB,MAAM,gCACN,EAAK1B,SAAS,CAAEkJ,YAAa8B,EAAiBF,aAAc,GAAIC,UAAW,OAhHpE,EAqHnBE,UAAY,WACR,GAA8B,KAA1B,EAAK1K,MAAM2K,WACXrK,SAASC,eAAe,cAAcC,MAAMC,OAAS,oBAEpD,CACDH,SAASC,eAAe,cAAcC,MAAMC,OAAS,OACrD,IAAImK,EAAgB,EAAK5K,MAAMwK,UAC/BI,EAAcjG,KAAK,EAAK3E,MAAM2K,YAC9BrK,SAASC,eAAe,cAAcX,MAAQ,GAC9CuB,MAAM,iBACN,EAAK1B,SAAS,CAAE+K,UAAWI,EAAeD,WAAY,OA/H3C,EAmInB5G,eAAiB,WACb,OACI,4BAAQrC,GAAG,YACP,4BAAQsG,QAAM,GAAd,mBACC,EAAK1I,MAAM2E,WAAWJ,KAAI,SAACK,EAAO7C,GAAQ,OAAO,4BAAQ8C,IAAK9C,GAAI6C,QAvI5D,EA4InB2G,cAAgB,SAACrL,GACb,EAAKC,SAAS,CAAE0K,WAAY3K,EAAEG,OAAOC,SA7ItB,EAgJnBkL,YAAc,SAACtL,GACX,EAAKC,SAAS,CAAE8K,aAAc/K,EAAEG,OAAOC,SAjJxB,EAoJnBmL,UAAY,SAACvL,GACT,EAAKC,SAAS,CAAEkL,WAAYnL,EAAEG,OAAOC,SArJtB,EAwJnB2C,eAAiB,SAACC,GACd,EAAK/C,SAAS,CAAEU,KAAMqC,EAASF,YAAY,KAzJ5B,EA4JnBD,WAAa,WACT,GAAI,EAAKrC,MAAMsC,WACX,OAAO,kBAAC,IAAD,CAAUpC,GAAI,EAAKF,MAAMG,QA5JpC,EAAKH,MAAQ,CACTmK,WAAY,GACZI,aAAc,GACdI,WAAY,GACZhC,YAAa,GACb6B,UAAW,GACXrK,KAAM,GACNmC,YAAY,GATD,E,sEAaT,IAAD,OACL,OACI,yBAAKd,UAAU,aACVC,KAAKY,aACN,yBAAKX,GAAG,MAAMF,UAAU,kBACpB,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKhB,MAAO,CAAEoC,UAAW,QAAUpB,UAAU,UACzC,4BAAQE,GAAG,aAAaF,UAAU,aAAaG,QAAS,kBAAM,EAAKY,eAAevB,KAAlF,aAGR,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,iBAAd,uBAGR,yBAAKhB,MAAO,CAAEuC,cAAe,QAAUvB,UAAU,OAC7C,yBAAKA,UAAU,UACVC,KAAKsC,mBAGd,yBAAKvC,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOE,GAAG,aAAaF,UAAU,aAAaQ,SAAUP,KAAKoJ,cAAe5I,KAAK,OAAOC,YAAY,kBAG5G,6BACA,yBAAKV,UAAU,qBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,eACX,2BAAOE,GAAG,eAAeO,KAAK,OAAOT,UAAU,eAAeQ,SAAUP,KAAKqJ,YAAa5I,YAAY,eAAe0G,aAAW,sBAAsBoC,mBAAiB,mBACvK,4BAAQrJ,QAAS,kBAAM,EAAK2I,eAAe5I,GAAG,cAAcF,UAAU,mBAAtE,QAIZ,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,eACX,2BAAOE,GAAG,aAAaO,KAAK,OAAOT,UAAU,eAAeQ,SAAUP,KAAKsJ,UAAW7I,YAAY,0BAA0B0G,aAAW,sBAAsBoC,mBAAiB,mBAC9K,4BAAQrJ,QAAS,kBAAM,EAAK+I,aAAahJ,GAAG,YAAYF,UAAU,mBAAlE,QAIZ,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,UACX,4BAAQG,QAAS,kBAAM,EAAK4D,gBAAgB/D,UAAU,iCAAtD,0B,GA3DcW,aCmBzB8I,G,gDAEnB,WAAY3L,GAAQ,IAAD,8BACjB,4CAAMA,KA4BRuJ,aAAe,SAACqC,EAAexG,GAC7B,IAAIyG,EAAc,EAAKnL,MAAM4E,QAC7BuG,EAAYzG,GAAewG,EAC3B,EAAKzL,SAAS,CAAEmF,QAASuG,KAhCR,EAmCnBrC,aAAe,SAACpE,GACd,IAAIyG,EAAc,EAAKnL,MAAM4E,QAC7BuG,EAAYzG,GAAaI,SAAU,EACnC,EAAKrF,SAAS,CAAEmF,QAASuG,KAtCR,EAyCnB7H,WAAa,SAAC8H,EAAW1L,EAAUmD,EAAWC,EAAUO,GACtD,IAAIgI,EAAY,EAAKrL,MAAMc,MAC3BuK,EAAUD,GAAW7J,KAAO7B,EAC5B2L,EAAUD,GAAWvI,UAAYA,EACjCwI,EAAUD,GAAWtI,SAAWA,EAChCuI,EAAUD,GAAW/H,KAAOA,EAC5B,EAAK5D,SAAS,CAAEqB,MAAOuK,KA/CN,EAkDnBrF,oBAAsB,SAACsF,EAAe5I,EAAiB6I,GACrD,IAAIF,EAAY,EAAKrL,MAAMc,MAC3BuK,EAAU3I,GAAiBuC,iBAAiBN,KAAK,CAAEH,cAAe+G,EAAa9F,aAAc6F,EAAenE,gBAAgB,IAC5H,EAAK1H,SAAS,CAAEqB,MAAOuK,KArDN,EAwDnBtG,2BAA6B,SAACyG,GAE5B,IADA,IAAI9I,EAAkBzB,aAAa0B,QAAQ,mBAClCtB,EAAI,EAAGA,EAAI,EAAKrB,MAAMc,MAAM4B,GAAiBuC,iBAAiB3D,OAAQD,IAC7E,GAAI,EAAKrB,MAAMc,MAAM4B,GAAiBuC,iBAAiB5D,GAAGmD,gBAAkBgH,EAC1E,OAAOnK,EACX,OAAQ,GA7DS,EAgEnBsG,eAAiB,SAACD,GAChB,IAAI+D,EAAiB,EAAKzL,MAAMiE,WAChCwH,EAAe9G,KAAK+C,GACpB,EAAKjI,SAAS,CAAEwE,WAAYwH,KAnEX,EAsEnBpB,UAAY,SAACvG,GACX,IAAIqH,EAAc,EAAKnL,MAAM4E,QAC7BuG,EAAYxG,KAAKb,GACjB,EAAKrE,SAAS,CAAEmF,QAASuG,KAtEzB,EAAKnL,MAAQ,CACXc,MAAO,CACL,IAAIiJ,EAAK,QAAS,QAAS,UAAW,OAAQ,iBAAkB,QAChE,IAAIA,EAAK,MAAO,MAAO,QAAS,OAAQ,iBAAkB,QAC1D,IAAIA,EAAK,MAAO,MAAO,OAAQ,OAAQ,iBAAkB,UAG3DnF,QAAS,CACP,IAAIoF,EAAO,EAAG,UAAW,UACvB,CAAC,IAAIC,EAAS,mBAAoB,CAAC,MAAO,MAAO,UACjD,IAAIA,EAAS,KAAM,CAAC,IAAK,IAAK,MAC9B,IAAIA,EAAS,MAAO,CAAC,IAAK,IAAK,QAEjC,IAAID,EAAO,EAAG,QAAS,WACrB,CAAC,IAAIC,EAAS,gBAAiB,CAAC,OAAQ,OAAQ,UAElD,IAAID,EAAO,EAAG,QAAS,UACrB,CAAC,IAAIC,EAAS,gBAAiB,CAAC,QAAS,QAAS,SAClD,IAAIA,EAAS,KAAM,CAAC,IAAK,IAAK,MAC9B,IAAIA,EAAS,MAAO,CAAC,IAAK,IAAK,SAGnChG,WAAY,CAAC,UAAW,aAzBT,E,sEA4ET,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyH,OAAK,EAACvL,Kb5GJ,Ia4GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAeA,EAAf,CAAsBwB,MAAO,EAAKd,MAAMc,YAC5F,kBAAC,IAAD,CAAO4K,OAAK,EAACvL,KAAMa,EAAa2K,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBwB,MAAO,EAAKd,MAAMc,YAC1F,kBAAC,IAAD,CAAO4K,OAAK,EAACvL,KbzGA,YayGwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBwB,MAAO,EAAKd,MAAMc,MAAOwC,WAAY,EAAKA,iBACvH,kBAAC,IAAD,CAAOoI,OAAK,EAACvL,KAAMa,EAAmB2K,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BwB,MAAO,EAAKd,MAAMc,MAAO8D,QAAS,EAAK5E,MAAM4E,QAASX,WAAY,EAAKjE,MAAMiE,WAAYc,2BAA4B,EAAKA,iCAC9M,kBAAC,IAAD,CAAO2G,OAAK,EAACvL,KAAMa,EAAmB2K,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBwB,MAAO,EAAKd,MAAMc,MAAO8D,QAAS,EAAK5E,MAAM4E,QAASoB,oBAAqB,EAAKA,oBAAqBjB,2BAA4B,EAAKA,iCACtN,kBAAC,IAAD,CAAO2G,OAAK,EAACvL,Kb7GC,ca6GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBwB,MAAO,EAAKd,MAAMc,YAClG,kBAAC,IAAD,CAAO4K,OAAK,EAACvL,KAAMa,EAAc2K,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAeA,EAAf,CAAsBwB,MAAO,EAAKd,MAAMc,YAC5F,kBAAC,IAAD,CAAO4K,OAAK,EAACvL,Kb3GG,ea2GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAiBA,EAAjB,CAAwBqI,eAAgB,EAAKA,qBACxG,kBAAC,IAAD,CAAO+D,OAAK,EAACvL,Kb3GO,kBa2GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BwB,MAAO,EAAKd,MAAMc,MAAOwC,WAAY,EAAKA,iBACpI,kBAAC,IAAD,CAAOoI,OAAK,EAACvL,Kb1GG,oBa0GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAsBA,EAAtB,CAA6BsF,QAAS,EAAK5E,MAAM4E,QAASX,WAAY,EAAKjE,MAAMiE,WAAYoG,UAAW,EAAKA,gBACxK,kBAAC,IAAD,CAAOqB,OAAK,EAACvL,Kb5GC,kBa4GwBwL,OAAQ,SAACrM,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BsF,QAAS,EAAK5E,MAAM4E,QAASX,WAAY,EAAKjE,MAAMiE,WAAY6E,aAAc,EAAKA,aAAcD,aAAc,EAAKA,0B,GA9FnL1G,cCZbyJ,QACW,cAA7BrI,OAAOsI,SAASC,UAEe,UAA7BvI,OAAOsI,SAASC,UAEhBvI,OAAOsI,SAASC,SAASC,MACvB,2DCZNC,IAASL,OAAO,kBAAC,EAAD,MAASrL,SAASC,eAAe,SD2H3C,kBAAmB0L,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.34e77d8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/surveyPic.05bf9d9d.jpg\";","export const LOGIN = '/';\r\nexport const USER = '/user';\r\nexport const ADMIN = '/admin';\r\nexport const SURVEYS = '/surveys';\r\nexport const COUPONPAGE = '/couponPage';\r\nexport const USER_INFO = '/userInfo';\r\nexport const ALLSURVEYS = '/allSurveys';\r\nexport const SURVEYPAGE = '/surveyPage';\r\nexport const NEW_CATEGORY = '/newCategory';\r\nexport const ADMIN_EDIT_USERS = '/adminEditUsers';\r\nexport const EDITSURVEY = '/editSurveyPage';\r\nexport const CREATESURVEY = '/createSurveyPage';\r\n\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class LoginPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: '',\r\n            password: '',\r\n            path: \"\",\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.redirectToUserPage()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Login Page</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <img onClick={() => this.login()} className=\"img-style\" title=\"Login\" src={require(`../pictures/surveyPic.jpg`)} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-top\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"password\" onChange={this.setPassword} className=\"inputStyle\" type=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.login()} className=\"btn btn-success buttonStyleWidth\">Login</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setPassword = (e) => {\r\n        this.setState({ password: e.target.value });\r\n    }\r\n\r\n    redirectToUserPage = () => {\r\n        if (this.state.isLoggedIn)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.password === '') {\r\n            document.getElementById(\"password\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"password\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    login = () => {\r\n        if (!this.areInputsBlank()) {\r\n            let foundUserIndex = this.findUser();\r\n            let whereToGo = '';\r\n            if (foundUserIndex !== -1) {\r\n                if (this.props.users[foundUserIndex].role === 'User')\r\n                    whereToGo = ROUTES.USER;\r\n                else\r\n                    whereToGo = ROUTES.ADMIN;\r\n\r\n                localStorage.setItem('loggedUserIndex', foundUserIndex);\r\n                this.setState({ path: whereToGo, isLoggedIn: true });\r\n            }\r\n            else\r\n                alert('User name or password are incorrect');\r\n        }\r\n\r\n    }\r\n    findUser = () => {\r\n        let usersArr = this.props.users;\r\n        for (let i = 0; i < usersArr.length; i++) {\r\n            if (this.state.userName === usersArr[i].user && this.state.password === usersArr[i].password)\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class UserPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex'),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.LOGIN)}>Disconnect</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                <h1 className=\"header-style style-role\">{this.props.users[this.state.loggedUserIndex].role}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Welcome {this.props.users[this.state.loggedUserIndex].firstName} {this.props.users[this.state.loggedUserIndex].lastName}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"header-style\">What would you like to do:</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Surveys</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.goToAvailableCompletedSurveys('available')}>Available Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.goToAvailableCompletedSurveys('completed')}>Completed Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.COUPONPAGE)}>Coupons awards</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">User Info</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER_INFO)}>Edit User Info</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    goToAvailableCompletedSurveys = (whereToGo) => {\r\n        if (whereToGo === 'available')\r\n            localStorage.setItem('whereToGo', 'available');\r\n        else\r\n            localStorage.setItem('whereToGo', 'completed');\r\n\r\n        this.changePathToGo(ROUTES.ALLSURVEYS);\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class UserInfo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].user,\r\n            firstName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].firstName,\r\n            lastName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].lastName,\r\n            mail: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].mail,\r\n            loggedUserIndex: window.localStorage.getItem(\"loggedUserIndex\"),\r\n            done: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.redirectToUserPage()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.setState({ done: true })}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit User Info</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} defaultValue={this.state.userName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"firstName\" onChange={this.setFirstName} defaultValue={this.state.firstName} className=\"inputStyle\" type=\"text\" placeholder=\"First Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"lastName\" onChange={this.setLastName} defaultValue={this.state.lastName} className=\"inputStyle\" type=\"text\" placeholder=\"Last Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"mail\" onChange={this.setMail} defaultValue={this.state.mail} className=\"inputStyle\" type=\"text\" placeholder=\"Mail\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.updateUser()} className=\"btn btn-info buttonStyleWidth\">Update Your Info</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    redirectToUserPage = () => {\r\n        if (this.state.done)\r\n            return <Redirect to={ROUTES.USER} />\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setFirstName = (e) => {\r\n        this.setState({ firstName: e.target.value });\r\n    }\r\n\r\n    setLastName = (e) => {\r\n        this.setState({ lastName: e.target.value });\r\n    }\r\n\r\n    setMail = (e) => {\r\n        this.setState({ mail: e.target.value });\r\n    }\r\n\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.firstName === '') {\r\n            document.getElementById(\"firstName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"firstName\").style.border = \"none\";\r\n\r\n        if (this.state.lastName === '') {\r\n            document.getElementById(\"lastName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"lastName\").style.border = \"none\";\r\n\r\n        if (this.state.mail === '') {\r\n            document.getElementById(\"mail\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    updateUser = () => {\r\n        if (!this.areInputsBlank()) {\r\n            this.props.updateUser(this.state.loggedUserIndex, this.state.userName, this.state.firstName, this.state.lastName, this.state.mail);\r\n            alert(\"User info changed successfully!\");\r\n            this.setState({ done: true });\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AllSurveysPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"All Categories\",\r\n            loggedUserIndex: Number(localStorage.getItem('loggedUserIndex')),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER)}>Go Back</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                {this.loadCategories()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.changeHeader()}\r\n                            </div>\r\n                        </div>\r\n                        {this.loadSurveys()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    loadSurveys = () => {\r\n        let surveysArr = this.addSurveys();\r\n        if (surveysArr.length === 0) {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"header-style\">No surveys to show</h1>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return surveysArr.map(survey => { return survey });\r\n    }\r\n\r\n    loadCategories = () => {\r\n        return (\r\n            <select id=\"category\" onChange={() => this.searchSurveyByCategory()}>\r\n                <option>All Categories</option>\r\n                {this.props.categories.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    searchSurveyByCategory = () => {\r\n        let inputCategory = document.getElementById(\"category\").value;\r\n        this.setState({ category: inputCategory });\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changeHeader = () => {\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (<h1 className=\"new-display-4\">Available Surveys</h1>);\r\n\r\n        return (<h1 className=\"new-display-4\">Completed Surveys</h1>);\r\n    }\r\n\r\n    showSurvey = (indexOfSurvey) => {\r\n        localStorage.setItem('indexOfSurvey', indexOfSurvey);\r\n        this.changePathToGo(ROUTES.SURVEYPAGE);\r\n    }\r\n\r\n    pushNewLinkToSurveysArr = (surveysArr, surveyIndex) => {\r\n        surveysArr.push(\r\n            <div key={surveyIndex} className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <button onClick={() => this.showSurvey(surveyIndex)} className=\"link-style\" >{this.props.surveys[surveyIndex].name}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSurveys = () => {\r\n        let surveysArr = [];\r\n        let whereToLoad = localStorage.getItem('whereToGo');\r\n        if (whereToLoad === 'available') {\r\n            for (let i = 0; i < this.props.surveys.length; i++) {\r\n                if (!this.props.surveys[i].deleted) {\r\n                    if (this.props.findSurveyIdInCompletedArr(this.props.surveys[i].id) === -1) {\r\n                        if (this.state.category === 'All Categories')\r\n                            this.pushNewLinkToSurveysArr(surveysArr, i);\r\n\r\n                        else if (this.props.surveys[i].category === this.state.category)\r\n                            this.pushNewLinkToSurveysArr(surveysArr, i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let userCompletedSurveys = this.props.users[this.state.loggedUserIndex].completedSurveys;\r\n            for (let i = 0; i < userCompletedSurveys.length; i++) {\r\n                if (this.state.category === 'All Categories')\r\n                    this.pushNewLinkToSurveysArr(surveysArr, userCompletedSurveys[i].indexOfSurvey);\r\n\r\n                else if (this.props.surveys[i].category === this.state.category)\r\n                    this.pushNewLinkToSurveysArr(surveysArr, userCompletedSurveys[i].indexOfSurvey);\r\n\r\n\r\n            }\r\n        }\r\n        return surveysArr;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class SurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            indexOfSurvey: Number(localStorage.getItem('indexOfSurvey')),\r\n            loggedUserIndex: Number(localStorage.getItem('loggedUserIndex')),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"boxSurvey\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        {this.addClearGoBackButtons()}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">{this.props.surveys[this.state.indexOfSurvey].name}</h1>\r\n                            </div>\r\n                        </div>\r\n                        {this.loadSurvey().map(que => { return que })}\r\n                        {this.addSubmitButton()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addClearGoBackButtons = () => {\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (\r\n                <div className=\"row\">\r\n                    <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ALLSURVEYS)}>Go Back</button>\r\n                    </div>\r\n                    <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.clearSurvey()}>Clear Survey</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        else {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ALLSURVEYS)}>Go Back</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    addSubmitButton = () => {\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (\r\n                <div className=\"row margin-bottom\">\r\n                    <div className=\"col-12\">\r\n                        <button onClick={() => this.submitSurvey()} style={{ width: \"15%\" }} className=\"btn btn-info\">Submit</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n    submitSurvey = () => {\r\n        let resultSurvey = [];\r\n        let someQuestionsNotFilled = false;\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length && !someQuestionsNotFilled; i++) {\r\n            let foundCheckedAns = false;\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length && !foundCheckedAns; j++) {\r\n                if (document.getElementById('a' + i + j).checked) {\r\n                    resultSurvey.push(j);\r\n                    foundCheckedAns = true;\r\n                }\r\n            }\r\n            if (!foundCheckedAns) {\r\n                alert('Some of the questions were not filled');\r\n                someQuestionsNotFilled = true;\r\n            }\r\n        }\r\n        if (!someQuestionsNotFilled) {\r\n            this.props.pushCompletedSurvey(resultSurvey, this.state.loggedUserIndex, this.state.indexOfSurvey);\r\n            alert('Thank you for filling the survey!');\r\n            this.changePathToGo(ROUTES.ALLSURVEYS);\r\n        }\r\n    }\r\n\r\n    clearSurvey = () => {\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length; i++)\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length; j++)\r\n                document.getElementById(\"a\" + i + j).checked = false;\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    addRadioButton = (indexQue, indexAns) => {\r\n        let isSurveyCompletedType = localStorage.getItem('whereToGo');\r\n        if (isSurveyCompletedType === 'completed') {\r\n            let completedArrayIndex = this.props.findSurveyIdInCompletedArr(this.state.indexOfSurvey);\r\n            if (this.props.users[this.state.loggedUserIndex].completedSurveys[completedArrayIndex].resultSurvey[indexQue] === indexAns)\r\n                return (<input type=\"radio\" checked disabled name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n\r\n            else return (<input type=\"radio\" disabled name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n\r\n        }\r\n        else {\r\n            return (<input type=\"radio\" name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n        }\r\n    }\r\n\r\n    loadSurvey = () => {\r\n        let questionsArr = [];\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length; i++) {\r\n            let answersArr = [];\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length; j++) {\r\n                answersArr.push(\r\n                    <div key={j} className=\"row\">\r\n                        <div style={{ marginLeft: \"480px\" }} className=\"col-12\">\r\n                            <table style={{ float: \"left\" }}  >\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"padding-table\">\r\n                                            {this.addRadioButton(i, j)}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <table style={{ float: \"center\" }} >\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <h4 className=\"autoBr\">{this.props.surveys[this.state.indexOfSurvey].questions[i].answers[j]}</h4>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            questionsArr.push(\r\n                <div key={i}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"sub-header autoBr\">{this.props.surveys[this.state.indexOfSurvey].questions[i].question}</h3>\r\n                        </div>\r\n                    </div>\r\n                    {answersArr.map(ans => { return ans })}\r\n                </div>\r\n            );\r\n        }\r\n        return questionsArr;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class CouponPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: \"\",\r\n            changePage: false,\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Coupon Awards</h1>\r\n                            </div>\r\n                        </div>\r\n                        {this.loadCoupons()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    loadCoupons = () => {\r\n        let couponsArr = this.addCoupons();\r\n        if (couponsArr.length === 0) {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"header-style\">No coupons to show</h1>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return couponsArr.map(coupon => { return coupon });\r\n    }\r\n\r\n    addCoupons = () => {\r\n        let couponsArr = [];\r\n        for (let i = 0; i < this.props.users[this.state.loggedUserIndex].completedSurveys.length; i++) {\r\n            if (this.props.users[this.state.loggedUserIndex].completedSurveys[i].couponRedeemed) {\r\n                couponsArr.push(\r\n                    <div key={i} className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <button id=\"style-disabled\" className=\"coupon-style\" disabled >Survey {this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1} Redeemed !</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                couponsArr.push(\r\n                    <div key={i} className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <button className=\"coupon-style\" id={'a' + i} onClick={() => this.redeemCoupon(i)}>Redeem Coupon Survey {this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1}</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        return couponsArr;\r\n    }\r\n\r\n    redeemCoupon = (i) => {\r\n        this.props.users[this.state.loggedUserIndex].completedSurveys[i].couponRedeemed = true;\r\n        document.getElementById('a' + i).disabled = true;\r\n        document.getElementById('a' + i).innerHTML = \"Survey \" + (this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1) + \" redeemed !\"\r\n        document.getElementById('a' + i).style.backgroundColor = \"#4ca454\";\r\n        document.getElementById('a' + i).style.color = \"white\";\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AdminPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex'),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.LOGIN)}>Disconnect</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                <h1 className=\"header-style style-role\">{this.props.users[this.state.loggedUserIndex].role}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Welcome {this.props.users[this.state.loggedUserIndex].firstName} {this.props.users[this.state.loggedUserIndex].lastName}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"header-style\">What would you like to do:</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Surveys</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.CREATESURVEY)}>Create New Survey</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.EDITSURVEY)}>Edit Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Users</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN_EDIT_USERS)}>Edit Users</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Categories</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.NEW_CATEGORY)}>Add New Category</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => 6}>All Categories</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class NewCategory extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newCategory: '',\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Add New Category</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-top\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"categoryName\" style={{ width: \"50%\" }} onChange={this.setCategoryName} className=\"inputStyle\" type=\"text\" placeholder=\"Category Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button style={{ width: \"50%\" }} onClick={() => this.addNewCategory()} className=\"btn btn-info buttonStyleWidth aaa\">Add New Category</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.newCategory === '') {\r\n            document.getElementById(\"categoryName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"categoryName\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    addNewCategory = () => {\r\n        if (!this.areInputsBlank()) {\r\n            this.props.addNewCategory(this.state.newCategory);\r\n            alert(\"New Category added!\");\r\n            this.changePathToGo(ROUTES.ADMIN);\r\n        }\r\n    }\r\n\r\n    setCategoryName = (e) => {\r\n        this.setState({ newCategory: e.target.value });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AdminEditUsers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userIndex: -1,\r\n            userName: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            mail: '',\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit Users</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ paddingBottom: \"12px\" }} className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadUsersDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} defaultValue={this.state.userName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"firstName\" onChange={this.setFirstName} defaultValue={this.state.firstName} className=\"inputStyle\" type=\"text\" placeholder=\"First Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"lastName\" onChange={this.setLastName} defaultValue={this.state.lastName} className=\"inputStyle\" type=\"text\" placeholder=\"Last Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"mail\" onChange={this.setMail} defaultValue={this.state.mail} className=\"inputStyle\" type=\"text\" placeholder=\"Mail\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.updateUser()} className=\"btn btn-info buttonStyleWidth\">Update User</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    loadUsersDropdown = () => {\r\n        return (\r\n            <select id=\"usersDropdown\" onChange={() => this.loadUserInfo()}>\r\n                <option hidden>Choose User</option>\r\n                {this.props.users.map((person, i) => { return <option key={i}>{person.user}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    loadUserInfo = () => {\r\n        let userName = document.getElementById(\"usersDropdown\").value;\r\n        this.setState({ userIndex: this.findUserbyUserName(userName) }, () => this.addDataToUserInfo());\r\n    }\r\n\r\n    addDataToUserInfo = () => {\r\n        let tempUserName = this.props.users[this.state.userIndex].user;\r\n        let tempFirstName = this.props.users[this.state.userIndex].firstName;\r\n        let tempLastName = this.props.users[this.state.userIndex].lastName;\r\n        let tempMail = this.props.users[this.state.userIndex].mail;\r\n\r\n        document.getElementById(\"userName\").value = tempUserName;\r\n        document.getElementById(\"firstName\").value = tempFirstName;\r\n        document.getElementById(\"lastName\").value = tempLastName;\r\n        document.getElementById(\"mail\").value = tempMail;\r\n\r\n        document.getElementById(\"userName\").style.border = \"none\";\r\n        document.getElementById(\"firstName\").style.border = \"none\";\r\n        document.getElementById(\"lastName\").style.border = \"none\";\r\n        document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        this.setState({ userName: tempUserName, firstName: tempFirstName, lastName: tempLastName, mail: tempMail });\r\n    }\r\n\r\n\r\n\r\n    findUserbyUserName = (userName) => {\r\n        for (let i = 0; i < this.props.users.length; i++)\r\n            if (this.props.users[i].user === userName)\r\n                return i;\r\n        return -1;\r\n    }\r\n\r\n    updateUser = () => {\r\n        if (document.getElementById(\"usersDropdown\").value === \"Choose User\")\r\n            alert(\"You need to choose a user\");\r\n\r\n        else if (!this.areInputsBlank()) {\r\n            this.props.updateUser(this.state.userIndex, this.state.userName, this.state.firstName, this.state.lastName, this.state.mail);\r\n            alert(\"User info changed successfully!\");\r\n        }\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setFirstName = (e) => {\r\n        this.setState({ firstName: e.target.value });\r\n    }\r\n\r\n    setLastName = (e) => {\r\n        this.setState({ lastName: e.target.value });\r\n    }\r\n\r\n    setMail = (e) => {\r\n        this.setState({ mail: e.target.value });\r\n    }\r\n\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.firstName === '') {\r\n            document.getElementById(\"firstName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"firstName\").style.border = \"none\";\r\n\r\n        if (this.state.lastName === '') {\r\n            document.getElementById(\"lastName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"lastName\").style.border = \"none\";\r\n\r\n        if (this.state.mail === '') {\r\n            document.getElementById(\"mail\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class EditSurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"All Categories\",\r\n            questionArr: [],\r\n            surveyIndexSelected: -1,\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"EditSurveyBox\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit Surveys</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-7\">\r\n                                {this.loadSelectedSurveyName()}\r\n                                {this.loadSurveyData()}\r\n                            </div>\r\n\r\n                            <div className=\"col-5\">\r\n                                <div style={{ paddingBottom: \"15px\" }} className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        {this.loadCategories()}\r\n                                    </div>\r\n                                </div>\r\n                                {this.loadSurveysNames(this.state.category).map(survey => { return survey })}\r\n                            </div>\r\n                        </div>\r\n                        {this.addUpdateButton()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addUpdateButton = () => {\r\n        if (this.state.questionArr.length !== 0)\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                            <button onClick={() => this.updateSurvey()} className=\"btn btn-info\">Update Survey</button>\r\n                            <button onClick={() => this.deleteSurvey()} className=\"btn btn-danger\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n    }\r\n\r\n    updateSurvey = () => {\r\n        let tempSurvey = this.props.surveys[this.state.surveyIndexSelected];\r\n\r\n        let tempSurveyName = document.getElementById('nameOfSurvey').value;\r\n        if (tempSurveyName !== '')\r\n            tempSurvey.name = tempSurveyName;\r\n\r\n        for (let i = 0; i < this.props.surveys[this.state.surveyIndexSelected].questions.length; i++) {\r\n            let tempQuestionName = document.getElementById('a' + i).value;\r\n            if (tempQuestionName !== '')\r\n                tempSurvey.questions[i].question = tempQuestionName;\r\n\r\n            for (let j = 0; j < this.props.surveys[this.state.surveyIndexSelected].questions[i].answers.length; j++) {\r\n                let tempAnswerName = document.getElementById('a' + i + j).value;\r\n                if (tempAnswerName !== '')\r\n                    tempSurvey.questions[i].answers[j] = tempAnswerName;\r\n            }\r\n        }\r\n        this.props.updateSurvey(tempSurvey, this.state.surveyIndexSelected);\r\n        this.setState({ questionArr: [], surveyIndexSelected: -1 })\r\n        alert(\"Survey updated successfully!\");\r\n    }\r\n\r\n    deleteSurvey = () => {\r\n        if (window.confirm('Do you want to delete the survey?')) {\r\n            this.props.deleteSurvey(this.state.surveyIndexSelected);\r\n            this.setState({ questionArr: [], surveyIndexSelected: -1 });\r\n        }\r\n    }\r\n\r\n    loadSelectedSurveyName = () => {\r\n        if (this.state.surveyIndexSelected !== -1)\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <input id=\"nameOfSurvey\" className=\"nameStyle\" placeholder={this.props.surveys[this.state.surveyIndexSelected].name} />\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n\r\n    loadQuestionsToArr = (surveyIndex) => {\r\n        let tempQuestionsArr = [];\r\n        for (let i = 0; i < this.props.surveys[surveyIndex].questions.length; i++) {\r\n            let tempAnswersArr = [];\r\n\r\n            for (let j = 0; j < this.props.surveys[surveyIndex].questions[i].answers.length; j++) {\r\n                let answer = this.props.surveys[surveyIndex].questions[i].answers[j];\r\n                tempAnswersArr.push(\r\n                    <div key={j} className=\"row\">\r\n                        <div className=\"col-12 heightInput\">\r\n                            <input id={\"a\" + i + j} type=\"text\" placeholder={answer} className=\"answerStyle\" />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            let question = this.props.surveys[surveyIndex].questions[i].question;\r\n            tempQuestionsArr.push(\r\n                <div key={i}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <input id={\"a\" + i} type=\"text\" placeholder={question} className=\"questionStyle\" />\r\n                        </div>\r\n                    </div>\r\n                    {tempAnswersArr.map(ans => { return ans })}\r\n                </div>\r\n            );\r\n        }\r\n        this.clearInputs();\r\n        this.setState({ questionArr: tempQuestionsArr, surveyIndexSelected: surveyIndex });\r\n    }\r\n\r\n    clearInputs = () => {\r\n        let inputs = document.getElementsByTagName('input');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            inputs[i].value = '';\r\n        }\r\n    }\r\n\r\n    loadSurveyData = () => {\r\n        if (this.state.questionArr.length === 0)\r\n            return (\r\n                <h1 className=\"header-style marginText\">Choose a survey to edit</h1>\r\n            );\r\n\r\n        else return this.state.questionArr.map(question => { return question });\r\n    }\r\n\r\n    loadSurveysNames = (category) => {\r\n        let surveysArr = [];\r\n        for (let i = 0; i < this.props.surveys.length; i++) {\r\n            if (!this.props.surveys[i].deleted) {\r\n                if (category === 'All Categories')\r\n                    this.pushNewLinkToSurveysArr(surveysArr, i);\r\n\r\n                else if (this.props.surveys[i].category === category)\r\n                    this.pushNewLinkToSurveysArr(surveysArr, i);\r\n            }\r\n        }\r\n        return surveysArr;\r\n    }\r\n\r\n    pushNewLinkToSurveysArr = (surveysArr, surveyIndex) => {\r\n        surveysArr.push(\r\n            <div key={surveyIndex} className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <button onClick={() => this.loadQuestionsToArr(surveyIndex)} className=\"link-style\" >{this.props.surveys[surveyIndex].name}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    loadCategories = () => {\r\n        return (\r\n            <select id=\"category\" onChange={() => this.searchSurveyByCategory()}>\r\n                <option>All Categories</option>\r\n                {this.props.categories.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    searchSurveyByCategory = () => {\r\n        let inputCategory = document.getElementById(\"category\").value;\r\n        this.setState({ category: inputCategory });\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n}\r\n","export class User {\r\n    user;\r\n    firstName;\r\n    lastName;\r\n    password;\r\n    mail;\r\n    role;\r\n    completedSurveys = []; // Ids of completed surveys\r\n\r\n    constructor(user, firstName, lastName, password, mail, role) {\r\n        this.user = user;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.password = password;\r\n        this.mail = mail;\r\n        this.role = role;\r\n    }\r\n}\r\n\r\nexport class Survey {\r\n    id;\r\n    name;\r\n    category;\r\n    deleted;\r\n    questions = [];\r\n\r\n    constructor(id, name, category, questions) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.category = category;\r\n        this.questions = questions;\r\n        this.deleted = false;\r\n    }\r\n}\r\n\r\nexport class Question {\r\n    question;\r\n    answers = [];\r\n\r\n    constructor(question, answers) {\r\n        this.question = question;\r\n        this.answers = answers;\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Survey, Question } from '../classes/classes.js';\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class CreateSurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyName: \"\",\r\n            questionName: \"\",\r\n            answerName: \"\",\r\n            questionArr: [],\r\n            answerArr: [],\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Create New Survey</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ paddingBottom: \"15px\" }} className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadCategories()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"surveyName\" className=\"inputStyle\" onChange={this.setSurveyName} type=\"text\" placeholder=\"Survey Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"input-group\">\r\n                                    <input id=\"questionName\" type=\"text\" className=\"form-control\" onChange={this.setQuestion} placeholder=\"Add Question\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon2\" />\r\n                                    <button onClick={() => this.addQuestion()} id=\"addQuestion\" className=\"btn btn-success\">+</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"input-group\">\r\n                                    <input id=\"answerName\" type=\"text\" className=\"form-control\" onChange={this.setAnswer} placeholder=\"Add Answers to Question\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon2\" />\r\n                                    <button onClick={() => this.addAnswer()} id=\"addAnswer\" className=\"btn btn-success\">+</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.submitSurvey()} className=\"btn btn-info buttonStyleWidth\">Submit Survey</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    submitSurvey = () => {\r\n        if (this.state.surveyName === '')\r\n            document.getElementById(\"surveyName\").style.border = \"2px solid red\";\r\n\r\n        else {\r\n            document.getElementById(\"surveyName\").style.border = \"none\";\r\n            let category = document.getElementById(\"category\").value;\r\n            if (category === \"Choose Category\")\r\n                alert(\"You need to choose a category\");\r\n\r\n            else if (this.state.questionArr.length === 0)\r\n                alert(\"You didn't add any questions to the survey\");\r\n\r\n            else {\r\n                let newSurveyId;\r\n                if (this.props.length === 0)\r\n                    newSurveyId = 0;\r\n                else\r\n                    newSurveyId = this.props.surveys[this.props.surveys.length - 1].id + 1;\r\n\r\n                let survey = new Survey(newSurveyId, this.state.surveyName, category, this.state.questionArr);\r\n                this.props.addSurvey(survey);\r\n                document.getElementById(\"surveyName\").value = \"\";\r\n                alert(\"Survey added successfully!\");\r\n                this.setState({ surveyName: \"\", questionArr: [] });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    addQuestion = () => {\r\n        if (this.state.questionName === '')\r\n            document.getElementById(\"questionName\").style.border = \"2px solid red\";\r\n\r\n        else {\r\n            document.getElementById(\"questionName\").style.border = \"1px solid #ced4da\";\r\n            if (this.state.answerArr.length <= 1)\r\n                alert(\"You need to add minimum 2 answers to the question\");\r\n\r\n            else {\r\n                let question = new Question(this.state.questionName, this.state.answerArr);\r\n                let tempQuestionArr = this.state.questionArr;\r\n                tempQuestionArr.push(question);\r\n                document.getElementById(\"questionName\").value = \"\";\r\n                alert(\"Question added with answers!\")\r\n                this.setState({ questionArr: tempQuestionArr, questionName: \"\", answerArr: [] });\r\n            }\r\n        }\r\n    }\r\n\r\n    addAnswer = () => {\r\n        if (this.state.answerName === '')\r\n            document.getElementById(\"answerName\").style.border = \"2px solid red\";\r\n\r\n        else {\r\n            document.getElementById(\"answerName\").style.border = \"none\";\r\n            let tempAnswerArr = this.state.answerArr;\r\n            tempAnswerArr.push(this.state.answerName);\r\n            document.getElementById(\"answerName\").value = \"\";\r\n            alert(\"Answer added!\")\r\n            this.setState({ answerArr: tempAnswerArr, answerName: \"\" });\r\n        }\r\n    }\r\n\r\n    loadCategories = () => {\r\n        return (\r\n            <select id=\"category\">\r\n                <option hidden>Choose Category</option>\r\n                {this.props.categories.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    setSurveyName = (e) => {\r\n        this.setState({ surveyName: e.target.value });\r\n    }\r\n\r\n    setQuestion = (e) => {\r\n        this.setState({ questionName: e.target.value });\r\n    }\r\n\r\n    setAnswer = (e) => {\r\n        this.setState({ answerName: e.target.value });\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\nimport UserPage from './components/UserPage';\nimport UserInfo from './components/UserInfo';\nimport AllSurveysPage from './components/AllSurveysPage';\nimport SurveyPage from './components/SurveyPage';\nimport CouponPage from './components/CouponPage';\nimport AdminPage from './components/AdminPage';\nimport NewCategory from './components/NewCategory';\nimport AdminEditUsers from './components/AdminEditUsers';\nimport EditSurveyPage from './components/EditSurveyPage';\nimport CreateSurveyPage from './components/CreateSurveyPage';\nimport './cssFiles/loginPage.css';\nimport './cssFiles/userPage.css';\nimport './cssFiles/surveyPage.css';\nimport './cssFiles/createPageStyle.css';\nimport './cssFiles/editSurveysStyle.css';\nimport *  as ROUTES from './constants/routes';\nimport { User, Survey, Question } from './classes/classes.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      users: [\n        new User('tomer', 'Tomer', 'Steiner', '1234', 'aaaa@gmail.com', 'User'),\n        new User('ram', 'Ram', 'Maian', '4321', 'bbbb@walla.com', 'User'),\n        new User('jon', 'Jon', 'Snow', '1111', 'cccc@gmail.com', 'Admin')\n      ],\n\n      surveys: [\n        new Survey(0, 'bla bla', 'Bedroom',\n          [new Question('are this better?', ['one', 'two', 'three']),\n          new Question('bb', ['a', 'b', 'c']),\n          new Question('ccc', ['d', 'e', 'f'])])\n        ,\n        new Survey(1, 'ma ma', 'Bathroom',\n          [new Question('is this good?', ['four', 'five', 'six'])])\n        ,\n        new Survey(2, 'na na', 'Bedroom',\n          [new Question('What is this?', ['seven', 'eight', 'nine']),\n          new Question('bb', ['4', '5', '6']),\n          new Question('ccc', ['1', '2', '3'])])\n      ],\n\n      categories: ['Bedroom', 'Bathroom']\n    }\n  }\n\n  updateSurvey = (updatedSurvey, surveyIndex) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys[surveyIndex] = updatedSurvey;\n    this.setState({ surveys: tempSurveys });\n  }\n\n  deleteSurvey = (surveyIndex) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys[surveyIndex].deleted = true;\n    this.setState({ surveys: tempSurveys });\n  }\n\n  updateUser = (indexUser, userName, firstName, lastName, mail) => {\n    let tempUsers = this.state.users;\n    tempUsers[indexUser].user = userName;\n    tempUsers[indexUser].firstName = firstName;\n    tempUsers[indexUser].lastName = lastName;\n    tempUsers[indexUser].mail = mail;\n    this.setState({ users: tempUsers });\n  }\n\n  pushCompletedSurvey = (checkedSurvey, loggedUserIndex, indexSurvey) => {\n    let tempUsers = this.state.users;\n    tempUsers[loggedUserIndex].completedSurveys.push({ indexOfSurvey: indexSurvey, resultSurvey: checkedSurvey, couponRedeemed: false });\n    this.setState({ users: tempUsers });\n  }\n\n  findSurveyIdInCompletedArr = (surveyId) => {\n    let loggedUserIndex = localStorage.getItem('loggedUserIndex');\n    for (let i = 0; i < this.state.users[loggedUserIndex].completedSurveys.length; i++)\n      if (this.state.users[loggedUserIndex].completedSurveys[i].indexOfSurvey === surveyId)\n        return i;\n    return -1;\n  }\n\n  addNewCategory = (newCategory) => {\n    let tempCategories = this.state.categories;\n    tempCategories.push(newCategory);\n    this.setState({ categories: tempCategories });\n  }\n\n  addSurvey = (survey) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys.push(survey);\n    this.setState({ surveys: tempSurveys });\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n\n          <Switch>\n            <Route exact path={ROUTES.LOGIN} render={(props) => <LoginPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.USER} render={(props) => <UserPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.USER_INFO} render={(props) => <UserInfo {...props} users={this.state.users} updateUser={this.updateUser} />} />\n            <Route exact path={ROUTES.ALLSURVEYS} render={(props) => <AllSurveysPage {...props} users={this.state.users} surveys={this.state.surveys} categories={this.state.categories} findSurveyIdInCompletedArr={this.findSurveyIdInCompletedArr} />} />\n            <Route exact path={ROUTES.SURVEYPAGE} render={(props) => <SurveyPage {...props} users={this.state.users} surveys={this.state.surveys} pushCompletedSurvey={this.pushCompletedSurvey} findSurveyIdInCompletedArr={this.findSurveyIdInCompletedArr} />} />\n            <Route exact path={ROUTES.COUPONPAGE} render={(props) => <CouponPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.ADMIN} render={(props) => <AdminPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.NEW_CATEGORY} render={(props) => <NewCategory {...props} addNewCategory={this.addNewCategory} />} />\n            <Route exact path={ROUTES.ADMIN_EDIT_USERS} render={(props) => <AdminEditUsers {...props} users={this.state.users} updateUser={this.updateUser} />} />\n            <Route exact path={ROUTES.CREATESURVEY} render={(props) => <CreateSurveyPage {...props} surveys={this.state.surveys} categories={this.state.categories} addSurvey={this.addSurvey} />} />\n            <Route exact path={ROUTES.EDITSURVEY} render={(props) => <EditSurveyPage {...props} surveys={this.state.surveys} categories={this.state.categories} deleteSurvey={this.deleteSurvey} updateSurvey={this.updateSurvey} />} />\n          </Switch>\n\n        </Router>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}