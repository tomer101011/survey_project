{"version":3,"sources":["pictures/surveyPic.jpg","constants/routes.js","components/LoginPage.js","components/UserPage.js","components/UserInfo.js","components/AllSurveysPage.js","components/SurveyPage.js","components/CouponPage.js","components/AdminPage.js","components/NewCategory.js","components/AdminEditUsers.js","components/EditSurveyPage.js","classes/classes.js","components/CreateSurveyPage.js","components/AssignCategories.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","USER","ADMIN","ALLSURVEYS","SURVEYPAGE","LoginPage","props","setUserName","e","setState","userName","target","value","setPassword","password","redirectToPage","state","isLoggedIn","to","path","areInputsBlank","someAreBlank","document","getElementById","style","border","login","foundUserIndex","findUser","whereToGo","users","role","ROUTES","localStorage","setItem","alert","usersArr","i","length","user","className","this","id","onClick","title","src","require","alt","onChange","type","placeholder","Component","UserPage","doRedirect","changePage","changePathToGo","newPath","goToAvailableCompletedSurveys","loggedUserIndex","getItem","textAlign","firstName","lastName","paddingBottom","UserInfo","redirectToUserPage","done","setFirstName","setLastName","setMail","mail","updateUser","window","defaultValue","AllSurveysPage","loadSurveys","surveysArr","addSurveys","map","survey","loadCategories","chosenCategoriesArr","assignedCategories","categories","searchSurveyByCategory","categ","key","inputCategory","category","changeHeader","showSurvey","indexOfSurvey","pushNewLinkToSurveysArr","surveyIndex","push","surveys","name","findCategSurvInAssigned","indexSurvey","deleted","findSurveyIdInCompletedArr","userCompletedSurveys","completedSurveys","Number","SurveyPage","addClearGoBackButtons","clearSurvey","addSubmitButton","submitSurvey","width","resultSurvey","someQuestionsNotFilled","questions","foundCheckedAns","j","answers","checked","pushCompletedSurvey","addRadioButton","indexQue","indexAns","completedArrayIndex","disabled","loadSurvey","questionsArr","answersArr","question","ans","que","CouponPage","loadCoupons","couponsArr","addCoupons","coupon","couponRedeemed","redeemCoupon","innerHTML","backgroundColor","color","AdminPage","NewCategory","newCategory","addNewCategory","setCategoryName","AdminEditUsers","loadUsersDropdown","loadUserInfo","hidden","person","userIndex","findUserbyUserName","addDataToUserInfo","tempUserName","tempFirstName","tempLastName","tempMail","EditSurveyPage","addUpdateButton","surveyIndexSelected","aria-label","updateSurvey","deleteSurvey","tempSurvey","tempSurveyName","tempQuestionName","tempAnswerName","questionArr","confirm","loadSelectedSurveyName","loadQuestionsToArr","tempQuestionsArr","tempAnswersArr","answer","clearInputs","inputs","getElementsByTagName","loadSurveyData","loadSurveysNames","User","Survey","Question","CreateSurveyPage","surveyName","newSurveyId","addSurvey","addQuestion","questionName","answerArr","tempQuestionArr","addAnswer","answerName","tempAnswerArr","setSurveyName","setQuestion","setAnswer","aria-describedby","AssignCategories","addAssignButton","dropSelectedUser","marginTop","assignCategories","tempCategoriesArr","indexSelectedUser","updateAssignedCategories","addCategories","categoriesArr","usersOnlyArr","filter","setDropSelectedUser","clearCheckboxes","App","tempUsers","updatedSurvey","tempSurveys","indexUser","checkedSurvey","surveyId","tempCategories","exact","render","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a741da5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/surveyPic.05bf9d9d.jpg\";","//All routes to the pages\r\nexport const LOGIN = '/';\r\nexport const USER = '/user';\r\nexport const ADMIN = '/admin';\r\nexport const SURVEYS = '/surveys';\r\nexport const COUPONPAGE = '/couponPage';\r\nexport const USER_INFO = '/userInfo';\r\nexport const ALLSURVEYS = '/allSurveys';\r\nexport const SURVEYPAGE = '/surveyPage';\r\nexport const NEW_CATEGORY = '/newCategory';\r\nexport const ADMIN_EDIT_USERS = '/adminEditUsers';\r\nexport const EDITSURVEY = '/editSurveyPage';\r\nexport const CREATESURVEY = '/createSurveyPage';\r\nexport const ASSIGN_CATEGORIES = '/assignCategories';\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class LoginPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: '',\r\n            password: '',\r\n            path: \"\",\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.redirectToPage()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Login Page</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <img onClick={() => this.login()} className=\"img-style\" title=\"Login\" src={require(`../pictures/surveyPic.jpg`)} alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-top\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"password\" onChange={this.setPassword} className=\"inputStyle\" type=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.login()} className=\"btn btn-success buttonStyleWidth\">Login</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setPassword = (e) => {\r\n        this.setState({ password: e.target.value });\r\n    }\r\n\r\n    //redirect to another user page\r\n    redirectToPage = () => {\r\n        if (this.state.isLoggedIn)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    //return true or false if the inputs are blank and if they are then style them\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.password === '') {\r\n            document.getElementById(\"password\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"password\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    //login to page\r\n    login = () => {\r\n\r\n        //if inputs are not blank\r\n        if (!this.areInputsBlank()) {\r\n            //find the user based on user name and password\r\n            let foundUserIndex = this.findUser();\r\n            let whereToGo = '';\r\n            //if the user was found (correct credentials) then go to another page based on it's role\r\n            if (foundUserIndex !== -1) {\r\n                if (this.props.users[foundUserIndex].role === 'User')\r\n                    whereToGo = ROUTES.USER;\r\n                else\r\n                    whereToGo = ROUTES.ADMIN;\r\n\r\n                localStorage.setItem('loggedUserIndex', foundUserIndex);\r\n                this.setState({ path: whereToGo, isLoggedIn: true });\r\n            }\r\n            else\r\n                alert('User name or password are incorrect');\r\n        }\r\n\r\n    }\r\n    //find the user based on user name and password\r\n    findUser = () => {\r\n        let usersArr = this.props.users;\r\n        for (let i = 0; i < usersArr.length; i++) {\r\n            if (this.state.userName === usersArr[i].user && this.state.password === usersArr[i].password)\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class UserPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex'),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.LOGIN)}>Disconnect</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                <h1 className=\"header-style style-role\">{this.props.users[this.state.loggedUserIndex].role}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Welcome {this.props.users[this.state.loggedUserIndex].firstName} {this.props.users[this.state.loggedUserIndex].lastName}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"header-style\">What would you like to do:</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Surveys</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.goToAvailableCompletedSurveys('available')}>Available Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.goToAvailableCompletedSurveys('completed')}>Completed Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.COUPONPAGE)}>Coupons awards</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">User Info</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER_INFO)}>Edit User Info</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    //redirect to All surveys page and send a string\r\n    //if you want to see the available surveys or completed ones\r\n    goToAvailableCompletedSurveys = (whereToGo) => {\r\n        if (whereToGo === 'available')\r\n            localStorage.setItem('whereToGo', 'available');\r\n        else\r\n            localStorage.setItem('whereToGo', 'completed');\r\n\r\n        this.changePathToGo(ROUTES.ALLSURVEYS);\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class UserInfo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].user,\r\n            firstName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].firstName,\r\n            lastName: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].lastName,\r\n            mail: this.props.users[window.localStorage.getItem(\"loggedUserIndex\")].mail,\r\n            loggedUserIndex: window.localStorage.getItem(\"loggedUserIndex\"),\r\n            done: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.redirectToUserPage()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.setState({ done: true })}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit User Info</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} defaultValue={this.state.userName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"firstName\" onChange={this.setFirstName} defaultValue={this.state.firstName} className=\"inputStyle\" type=\"text\" placeholder=\"First Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"lastName\" onChange={this.setLastName} defaultValue={this.state.lastName} className=\"inputStyle\" type=\"text\" placeholder=\"Last Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"mail\" onChange={this.setMail} defaultValue={this.state.mail} className=\"inputStyle\" type=\"text\" placeholder=\"Mail\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.updateUser()} className=\"btn btn-info buttonStyleWidth\">Update Your Info</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //redirect to user page\r\n    redirectToUserPage = () => {\r\n        if (this.state.done)\r\n            return <Redirect to={ROUTES.USER} />\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setFirstName = (e) => {\r\n        this.setState({ firstName: e.target.value });\r\n    }\r\n\r\n    setLastName = (e) => {\r\n        this.setState({ lastName: e.target.value });\r\n    }\r\n\r\n    setMail = (e) => {\r\n        this.setState({ mail: e.target.value });\r\n    }\r\n\r\n    //check if the inputs are blank and if they are mark them with red border\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.firstName === '') {\r\n            document.getElementById(\"firstName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"firstName\").style.border = \"none\";\r\n\r\n        if (this.state.lastName === '') {\r\n            document.getElementById(\"lastName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"lastName\").style.border = \"none\";\r\n\r\n        if (this.state.mail === '') {\r\n            document.getElementById(\"mail\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    //update the user\r\n    updateUser = () => {\r\n        if (!this.areInputsBlank()) {\r\n            this.props.updateUser(this.state.loggedUserIndex, this.state.userName, this.state.firstName, this.state.lastName, this.state.mail);\r\n            alert(\"User info changed successfully!\");\r\n            this.setState({ done: true });\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AllSurveysPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"All Categories\",\r\n            loggedUserIndex: Number(localStorage.getItem('loggedUserIndex')),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER)}>Go Back</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                {this.loadCategories()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.changeHeader()}\r\n                            </div>\r\n                        </div>\r\n                        {this.loadSurveys()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //load links of surveys names to screen\r\n    loadSurveys = () => {\r\n        //get an array that contains HTML of each survey that is available to user or completed by user \r\n        let surveysArr = this.addSurveys();\r\n        //if it is empty then show a message\r\n        if (surveysArr.length === 0) {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"header-style\">No surveys to show</h1>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //else show to the screen the links of survey names available/completed\r\n        else\r\n            return surveysArr.map(survey => { return survey });\r\n    }\r\n\r\n    //load categories to dropdown\r\n    loadCategories = () => {\r\n        let chosenCategoriesArr = [];\r\n        //if the user wants to see available surveys then show him only the categories assigned to him\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            chosenCategoriesArr = this.props.users[this.state.loggedUserIndex].assignedCategories;\r\n\r\n        //else show him all the categories because maybe he completed a survey\r\n        //of categories he no longer has access to\r\n        else\r\n            chosenCategoriesArr = this.props.categories;\r\n\r\n        return (\r\n            <select id=\"category\" onChange={() => this.searchSurveyByCategory()}>\r\n                <option>All Categories</option>\r\n                {chosenCategoriesArr.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    //set the category state to the one the user chose and render again so surveys will load\r\n    searchSurveyByCategory = () => {\r\n        let inputCategory = document.getElementById(\"category\").value;\r\n        this.setState({ category: inputCategory });\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    //change header of page based on whether the user wanted to see availabe surveys or completed ones\r\n    changeHeader = () => {\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (<h1 className=\"new-display-4\">Available Surveys</h1>);\r\n\r\n        return (<h1 className=\"new-display-4\">Completed Surveys</h1>);\r\n    }\r\n\r\n    //Go to survey page\r\n    showSurvey = (indexOfSurvey) => {\r\n        localStorage.setItem('indexOfSurvey', indexOfSurvey);\r\n        this.changePathToGo(ROUTES.SURVEYPAGE);\r\n    }\r\n\r\n    //get the array of surveys (HTML) and push another survey link to it\r\n    pushNewLinkToSurveysArr = (surveysArr, surveyIndex) => {\r\n        surveysArr.push(\r\n            <div key={surveyIndex} className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <button onClick={() => this.showSurvey(surveyIndex)} className=\"link-style\" >{this.props.surveys[surveyIndex].name}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //return true if the category of a survey is in assigned categories array of the user\r\n    findCategSurvInAssigned = (indexSurvey) => {\r\n        for (let i = 0; i < this.props.users[this.state.loggedUserIndex].assignedCategories.length; i++)\r\n            if (this.props.users[this.state.loggedUserIndex].assignedCategories[i] === this.props.surveys[indexSurvey].category)\r\n                return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    //return survey array (HTML) based on whether the user want to see available or completed surveys\r\n    addSurveys = () => {\r\n        let surveysArr = [];\r\n        let whereToLoad = localStorage.getItem('whereToGo');\r\n\r\n        //if the user want to see available surveys\r\n        if (whereToLoad === 'available') {\r\n            for (let i = 0; i < this.props.surveys.length; i++) {\r\n                //if the survey is not deleted and it is not completed by the user\r\n                if (!this.props.surveys[i].deleted &&\r\n                    this.props.findSurveyIdInCompletedArr(this.props.surveys[i].id) === -1) {\r\n\r\n                    //if the dropdown value is \"All Categories\"\r\n                    //and the category of the survey is in the user assigned categories\r\n                    if (this.state.category === 'All Categories' && this.findCategSurvInAssigned(i)) {\r\n                        this.pushNewLinkToSurveysArr(surveysArr, i);\r\n                    }\r\n\r\n                    //else a specific category was chosen\r\n                    else if (this.props.surveys[i].category === this.state.category)\r\n                        this.pushNewLinkToSurveysArr(surveysArr, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        //the user want to see completed surveys\r\n        else {\r\n            let userCompletedSurveys = this.props.users[this.state.loggedUserIndex].completedSurveys;\r\n            for (let i = 0; i < userCompletedSurveys.length; i++) {\r\n                //if you want all the completed surveys\r\n                if (this.state.category === 'All Categories')\r\n                    this.pushNewLinkToSurveysArr(surveysArr, userCompletedSurveys[i].indexOfSurvey);\r\n\r\n                //else a specific category was chosen\r\n                else if (this.props.surveys[userCompletedSurveys[i].indexOfSurvey].category === this.state.category)\r\n                    this.pushNewLinkToSurveysArr(surveysArr, userCompletedSurveys[i].indexOfSurvey);\r\n            }\r\n        }\r\n        return surveysArr;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class SurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            indexOfSurvey: Number(localStorage.getItem('indexOfSurvey')),\r\n            loggedUserIndex: Number(localStorage.getItem('loggedUserIndex')),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"boxSurvey\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        {this.addClearGoBackButtons()}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">{this.props.surveys[this.state.indexOfSurvey].name}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <table className=\"mx-auto\">\r\n                                    <tbody>\r\n                                        {this.loadSurvey().map(que => { return que })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {this.addSubmitButton()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //add a clear survey and go back buttons to the top page\r\n    addClearGoBackButtons = () => {\r\n\r\n        //if the user want to fill the survey, then add both buttons\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (\r\n                <div className=\"row\">\r\n                    <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ALLSURVEYS)}>Go Back</button>\r\n                    </div>\r\n                    <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.clearSurvey()}>Clear Survey</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        //else the user want to watch the completed survey so add only the go back button\r\n        else {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                        <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ALLSURVEYS)}>Go Back</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //add submit survey button only if the user want to fill the survey\r\n    addSubmitButton = () => {\r\n        if (localStorage.getItem('whereToGo') === 'available')\r\n            return (\r\n                <div className=\"row margin-bottom\">\r\n                    <div className=\"col-12\">\r\n                        <button onClick={() => this.submitSurvey()} style={{ width: \"15%\" }} className=\"btn btn-info\">Submit Survey</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n    //submit and survey and save it\r\n    submitSurvey = () => {\r\n        //resultSurvey array is an array that has the indexes of all checked answers\r\n        //index 'i' of the array is the question index and it's value is the checked answer index\r\n        let resultSurvey = [];\r\n        let someQuestionsNotFilled = false;\r\n        //walk through all questions and their corresponding answers and push them to resultSurvey array\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length && !someQuestionsNotFilled; i++) {\r\n            let foundCheckedAns = false;\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length && !foundCheckedAns; j++) {\r\n                if (document.getElementById('a' + i + j).checked) {\r\n                    resultSurvey.push(j);\r\n                    //found the check answer so move on to the next question\r\n                    foundCheckedAns = true;\r\n                }\r\n            }\r\n            //if the user happened to forget to answer a question\r\n            if (!foundCheckedAns) {\r\n                alert('Some of the questions were not filled');\r\n                someQuestionsNotFilled = true;\r\n            }\r\n        }\r\n        //if all questions were filled\r\n        if (!someQuestionsNotFilled) {\r\n            this.props.pushCompletedSurvey(resultSurvey, this.state.loggedUserIndex, this.state.indexOfSurvey);\r\n            alert('Thank you for filling the survey!');\r\n            this.changePathToGo(ROUTES.ALLSURVEYS);\r\n        }\r\n    }\r\n\r\n    //clear the survey\r\n    clearSurvey = () => {\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length; i++)\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length; j++)\r\n                document.getElementById(\"a\" + i + j).checked = false;\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    //add radion buttons of answers to the screen\r\n    //also check the state of a radio if the user want to see the completed survey\r\n    //the function gets the index of an answer( indexQue = i, indexAns = j)\r\n    addRadioButton = (indexQue, indexAns) => {\r\n        let isSurveyCompletedType = localStorage.getItem('whereToGo');\r\n\r\n        //if the user want to see the completed survey\r\n        if (isSurveyCompletedType === 'completed') {\r\n            let completedArrayIndex = this.props.findSurveyIdInCompletedArr(this.state.indexOfSurvey);\r\n\r\n            //if the answer is checked\r\n            //resultSurvey[indexQue] is the index of the answer marked for question in indexQue\r\n            if (this.props.users[this.state.loggedUserIndex].completedSurveys[completedArrayIndex].resultSurvey[indexQue] === indexAns)\r\n                return (<input type=\"radio\" checked disabled name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n\r\n            else return (<input type=\"radio\" disabled name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n\r\n        }\r\n        //else the user want to fill a survey so add radio buttons that are not checked\r\n        else {\r\n            return (<input type=\"radio\" name={\"a\" + indexQue} id={\"a\" + indexQue + indexAns} />);\r\n        }\r\n    }\r\n\r\n    //load survey to the screen\r\n    //return a question HTML array with the answers\r\n    loadSurvey = () => {\r\n        let questionsArr = [];\r\n        for (let i = 0; i < this.props.surveys[this.state.indexOfSurvey].questions.length; i++) {\r\n            let answersArr = [];\r\n            for (let j = 0; j < this.props.surveys[this.state.indexOfSurvey].questions[i].answers.length; j++) {\r\n                answersArr.push(\r\n                    <tr key={j}>\r\n                        <td className=\"padding-table\"> {this.addRadioButton(i, j)}</td>\r\n                        <td><h4 className=\"autoBr\">{this.props.surveys[this.state.indexOfSurvey].questions[i].answers[j]}</h4></td>\r\n                    </tr>\r\n                );\r\n            }\r\n            questionsArr.push(\r\n                <tr key={i}>\r\n                    <td>\r\n                        <table className=\"mx-auto\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td><h3 className=\"sub-header autoBr\">{this.props.surveys[this.state.indexOfSurvey].questions[i].question}</h3></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <table className=\"mx-auto\">\r\n                            <tbody>\r\n                                {answersArr.map(ans => { return ans })}\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n\r\n            );\r\n        }\r\n        return questionsArr;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class CouponPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: \"\",\r\n            changePage: false,\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.USER)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Coupon Awards</h1>\r\n                            </div>\r\n                        </div>\r\n                        {this.loadCoupons()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //load the coupons to the screen\r\n    loadCoupons = () => {\r\n        let couponsArr = this.addCoupons();\r\n\r\n        //if there are no coupons then show a message\r\n        if (couponsArr.length === 0) {\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"header-style\">No coupons to show</h1>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return couponsArr.map(coupon => { return coupon });\r\n    }\r\n\r\n    //return a coupons HTML array that has all the coupons of the user\r\n    addCoupons = () => {\r\n        let couponsArr = [];\r\n        for (let i = 0; i < this.props.users[this.state.loggedUserIndex].completedSurveys.length; i++) {\r\n\r\n            //if the user redeemed the coupon then return it as unclickable\r\n            if (this.props.users[this.state.loggedUserIndex].completedSurveys[i].couponRedeemed) {\r\n                couponsArr.push(\r\n                    <div key={i} className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <button id=\"style-disabled\" className=\"coupon-style\" disabled >Survey {this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1} Redeemed !</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            //else return the coupon as clickable\r\n            else {\r\n                couponsArr.push(\r\n                    <div key={i} className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <button className=\"coupon-style\" id={'a' + i} onClick={() => this.redeemCoupon(i)}>Redeem Coupon Survey {this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1}</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        return couponsArr;\r\n    }\r\n\r\n    //redeem the coupon\r\n    redeemCoupon = (i) => {\r\n        //change the coupon state to redeemed and change it's style\r\n        this.props.users[this.state.loggedUserIndex].completedSurveys[i].couponRedeemed = true;\r\n        document.getElementById('a' + i).disabled = true;\r\n        document.getElementById('a' + i).innerHTML = \"Survey \" + (this.props.users[this.state.loggedUserIndex].completedSurveys[i].indexOfSurvey + 1) + \" redeemed !\"\r\n        document.getElementById('a' + i).style.backgroundColor = \"#4ca454\";\r\n        document.getElementById('a' + i).style.color = \"white\";\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AdminPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedUserIndex: localStorage.getItem('loggedUserIndex'),\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-6\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.LOGIN)}>Disconnect</button>\r\n                            </div>\r\n                            <div style={{ textAlign: \"right\" }} className=\"col-6\">\r\n                                <h1 className=\"header-style style-role\">{this.props.users[this.state.loggedUserIndex].role}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Welcome {this.props.users[this.state.loggedUserIndex].firstName} {this.props.users[this.state.loggedUserIndex].lastName}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"header-style\">What would you like to do:</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Surveys</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.CREATESURVEY)}>Create New Survey</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.EDITSURVEY)}>Edit Surveys</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Users</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN_EDIT_USERS)}>Edit Users</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h3 className=\"sub-header\">Categories</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.NEW_CATEGORY)}>Add New Category</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div style={{ paddingBottom: \"10px\" }} className=\"col-12\">\r\n                                <button className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ASSIGN_CATEGORIES)}>Assign Categories</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class NewCategory extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newCategory: '',\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Add New Category</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-top\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"categoryName\" style={{ width: \"50%\" }} onChange={this.setCategoryName} className=\"inputStyle\" type=\"text\" placeholder=\"Category Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button style={{ width: \"50%\" }} onClick={() => this.addNewCategory()} className=\"btn btn-info buttonStyleWidth aaa\">Add New Category</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //return true or false if the inputs are blank and if they are then style them\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.newCategory === '') {\r\n            document.getElementById(\"categoryName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"categoryName\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n\r\n    //add a new category to category array\r\n    addNewCategory = () => {\r\n        if (!this.areInputsBlank()) {\r\n            this.props.addNewCategory(this.state.newCategory);\r\n            alert(\"New Category added!\");\r\n            this.changePathToGo(ROUTES.ADMIN);\r\n        }\r\n    }\r\n\r\n    setCategoryName = (e) => {\r\n        this.setState({ newCategory: e.target.value });\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AdminEditUsers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userIndex: -1,\r\n            userName: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            mail: '',\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit Users</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ paddingBottom: \"12px\" }} className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadUsersDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"userName\" onChange={this.setUserName} defaultValue={this.state.userName} className=\"inputStyle\" type=\"text\" placeholder=\"User Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"firstName\" onChange={this.setFirstName} defaultValue={this.state.firstName} className=\"inputStyle\" type=\"text\" placeholder=\"First Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"lastName\" onChange={this.setLastName} defaultValue={this.state.lastName} className=\"inputStyle\" type=\"text\" placeholder=\"Last Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"mail\" onChange={this.setMail} defaultValue={this.state.mail} className=\"inputStyle\" type=\"text\" placeholder=\"Mail\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.updateUser()} className=\"btn btn-info buttonStyleWidth\">Update User</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //load to dropdown the user names (not first names)\r\n    loadUsersDropdown = () => {\r\n        return (\r\n            <select id=\"usersDropdown\" onChange={() => this.loadUserInfo()}>\r\n                <option hidden>Choose User</option>\r\n                {this.props.users.map((person, i) => { return <option key={i}>{person.user}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    //set the index of the chosen user from dropdown and then load the user to inputs\r\n    loadUserInfo = () => {\r\n        let userName = document.getElementById(\"usersDropdown\").value;\r\n        this.setState({ userIndex: this.props.findUserbyUserName(userName) }, () => this.addDataToUserInfo());\r\n    }\r\n\r\n    //load the info of a user to input tags based on the dropdown value\r\n    addDataToUserInfo = () => {\r\n        let tempUserName = this.props.users[this.state.userIndex].user;\r\n        let tempFirstName = this.props.users[this.state.userIndex].firstName;\r\n        let tempLastName = this.props.users[this.state.userIndex].lastName;\r\n        let tempMail = this.props.users[this.state.userIndex].mail;\r\n\r\n        document.getElementById(\"userName\").value = tempUserName;\r\n        document.getElementById(\"firstName\").value = tempFirstName;\r\n        document.getElementById(\"lastName\").value = tempLastName;\r\n        document.getElementById(\"mail\").value = tempMail;\r\n\r\n        document.getElementById(\"userName\").style.border = \"none\";\r\n        document.getElementById(\"firstName\").style.border = \"none\";\r\n        document.getElementById(\"lastName\").style.border = \"none\";\r\n        document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        this.setState({ userName: tempUserName, firstName: tempFirstName, lastName: tempLastName, mail: tempMail });\r\n    }\r\n\r\n    //update the user info based on input values\r\n    updateUser = () => {\r\n        if (document.getElementById(\"usersDropdown\").value === \"Choose User\")\r\n            alert(\"You need to choose a user\");\r\n\r\n        //if the inputs are not blank, then update user\r\n        else if (!this.areInputsBlank()) {\r\n            this.props.updateUser(this.state.userIndex, this.state.userName, this.state.firstName, this.state.lastName, this.state.mail);\r\n            alert(\"User info changed successfully!\");\r\n        }\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n\r\n    setUserName = (e) => {\r\n        this.setState({ userName: e.target.value });\r\n    }\r\n\r\n    setFirstName = (e) => {\r\n        this.setState({ firstName: e.target.value });\r\n    }\r\n\r\n    setLastName = (e) => {\r\n        this.setState({ lastName: e.target.value });\r\n    }\r\n\r\n    setMail = (e) => {\r\n        this.setState({ mail: e.target.value });\r\n    }\r\n\r\n    //check if the inputs are blank and if they are mark them with red border\r\n    areInputsBlank = () => {\r\n        let someAreBlank = false;\r\n\r\n        if (this.state.userName === '') {\r\n            document.getElementById(\"userName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"userName\").style.border = \"none\";\r\n\r\n        if (this.state.firstName === '') {\r\n            document.getElementById(\"firstName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"firstName\").style.border = \"none\";\r\n\r\n        if (this.state.lastName === '') {\r\n            document.getElementById(\"lastName\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"lastName\").style.border = \"none\";\r\n\r\n        if (this.state.mail === '') {\r\n            document.getElementById(\"mail\").style.border = \"2px solid red\";\r\n            someAreBlank = true;\r\n        }\r\n        else\r\n            document.getElementById(\"mail\").style.border = \"none\";\r\n\r\n        return someAreBlank;\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class EditSurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"All Categories\",\r\n            questionArr: [],\r\n            surveyIndexSelected: -1,\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"EditSurveyBox\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Edit Surveys</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-7\">\r\n                                {this.loadSelectedSurveyName()}\r\n                                {this.loadSurveyData()}\r\n                            </div>\r\n\r\n                            <div className=\"col-5\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        {this.loadCategories()}\r\n                                    </div>\r\n                                </div>\r\n                                {this.loadSurveysNames(this.state.category).map(survey => { return survey })}\r\n                            </div>\r\n                        </div>\r\n                        {this.addUpdateButton()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //add buttons to the screen if the user selected a survey to edit\r\n    addUpdateButton = () => {\r\n        if (this.state.surveyIndexSelected !== -1)\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                            <button onClick={() => this.updateSurvey()} className=\"btn btn-info\">Update Survey</button>\r\n                            <button onClick={() => this.deleteSurvey()} className=\"btn btn-danger\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n    }\r\n\r\n    //update the survey\r\n    updateSurvey = () => {\r\n        //all inputs have placeholders to the original survey inputs\r\n        //if the admin doesn't want to update certain inputs\r\n        //then he can leave them blank and the placeholder value will be taken instead\r\n        let tempSurvey = this.props.surveys[this.state.surveyIndexSelected];\r\n\r\n        let tempSurveyName = document.getElementById('nameOfSurvey').value;\r\n\r\n        //if the new survey name is not blank, then the new survey name will be taken\r\n        if (tempSurveyName !== '')\r\n            tempSurvey.name = tempSurveyName;\r\n\r\n        //walk through all questions\r\n        for (let i = 0; i < this.props.surveys[this.state.surveyIndexSelected].questions.length; i++) {\r\n            let tempQuestionName = document.getElementById('a' + i).value;\r\n\r\n            //if the new question name is not blank, then the new question name will be taken\r\n            if (tempQuestionName !== '')\r\n                tempSurvey.questions[i].question = tempQuestionName;\r\n\r\n            //walk through all answers of a question\r\n            for (let j = 0; j < this.props.surveys[this.state.surveyIndexSelected].questions[i].answers.length; j++) {\r\n                let tempAnswerName = document.getElementById('a' + i + j).value;\r\n\r\n                //if the new answer name is not blank, then the new answer name will be taken\r\n                if (tempAnswerName !== '')\r\n                    tempSurvey.questions[i].answers[j] = tempAnswerName;\r\n            }\r\n        }\r\n\r\n        //update the survey\r\n        this.props.updateSurvey(tempSurvey, this.state.surveyIndexSelected);\r\n\r\n        //change states back to default so the admin can update/delete another survey\r\n        this.setState({ questionArr: [], surveyIndexSelected: -1 })\r\n        alert(\"Survey updated successfully!\");\r\n    }\r\n\r\n    //delete a survey\r\n    deleteSurvey = () => {\r\n        if (window.confirm('Do you want to delete the survey?')) {\r\n            this.props.deleteSurvey(this.state.surveyIndexSelected);\r\n            //change states back to default so the admin can update/delete another survey\r\n            this.setState({ questionArr: [], surveyIndexSelected: -1 });\r\n        }\r\n    }\r\n\r\n    //return a div that contains the name of the survey\r\n    loadSelectedSurveyName = () => {\r\n        if (this.state.surveyIndexSelected !== -1)\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <input id=\"nameOfSurvey\" className=\"nameStyle\" placeholder={this.props.surveys[this.state.surveyIndexSelected].name} />\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n\r\n    //load questions to questionArr HTML array state\r\n    loadQuestionsToArr = (surveyIndex) => {\r\n        let tempQuestionsArr = [];\r\n\r\n        //walk through all questions of the selected survey\r\n        for (let i = 0; i < this.props.surveys[surveyIndex].questions.length; i++) {\r\n            //answers array HTML that contains rows of answers\r\n            let tempAnswersArr = [];\r\n\r\n            //walk through all answers of the question\r\n            for (let j = 0; j < this.props.surveys[surveyIndex].questions[i].answers.length; j++) {\r\n                let answer = this.props.surveys[surveyIndex].questions[i].answers[j];\r\n                tempAnswersArr.push(\r\n                    <div key={j} className=\"row\">\r\n                        <div className=\"col-12 heightInput\">\r\n                            <input id={\"a\" + i + j} type=\"text\" placeholder={answer} className=\"answerStyle\" />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            let question = this.props.surveys[surveyIndex].questions[i].question;\r\n            tempQuestionsArr.push(\r\n                <div key={i}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <input id={\"a\" + i} type=\"text\" placeholder={question} className=\"questionStyle\" />\r\n                        </div>\r\n                    </div>\r\n                    {tempAnswersArr.map(ans => { return ans })}\r\n                </div>\r\n            );\r\n        }\r\n        //clear inputs of previous selected survey\r\n        this.clearInputs();\r\n        this.setState({ questionArr: tempQuestionsArr, surveyIndexSelected: surveyIndex });\r\n    }\r\n\r\n    //clear all inputs\r\n    clearInputs = () => {\r\n        let inputs = document.getElementsByTagName('input');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            inputs[i].value = '';\r\n        }\r\n    }\r\n\r\n    //load surveys to the screen\r\n    loadSurveyData = () => {\r\n        //if no survey selected then a message will be shown\r\n        if (this.state.surveyIndexSelected === -1)\r\n            return (<h1 className=\"header-style marginText\">Choose a survey to edit</h1>);\r\n\r\n        //else show the built survey HTML to the screen\r\n        else return this.state.questionArr.map(question => { return question });\r\n    }\r\n\r\n    //load survey names links to the screen\r\n    loadSurveysNames = (category) => {\r\n        let surveysArr = [];\r\n        for (let i = 0; i < this.props.surveys.length; i++) {\r\n            //if the survey is not deleted\r\n            if (!this.props.surveys[i].deleted) {\r\n                if (category === 'All Categories')\r\n                    this.pushNewLinkToSurveysArr(surveysArr, i);\r\n\r\n                //show survey name link of a chosen category\r\n                else if (this.props.surveys[i].category === category)\r\n                    this.pushNewLinkToSurveysArr(surveysArr, i);\r\n            }\r\n        }\r\n        return surveysArr;\r\n    }\r\n\r\n    //push to surveyArr HTML a survey name link\r\n    pushNewLinkToSurveysArr = (surveysArr, surveyIndex) => {\r\n        surveysArr.push(\r\n            <div key={surveyIndex} className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <button onClick={() => this.loadQuestionsToArr(surveyIndex)} className=\"link-style\" >{this.props.surveys[surveyIndex].name}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //load categories to dropdown\r\n    loadCategories = () => {\r\n        return (\r\n            <select id=\"category\" onChange={() => this.searchSurveyByCategory()}>\r\n                <option>All Categories</option>\r\n                {this.props.categories.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    //change category state to chosen dropdown category and render again to load survey name links\r\n    searchSurveyByCategory = () => {\r\n        let inputCategory = document.getElementById(\"category\").value;\r\n        this.setState({ category: inputCategory });\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","export class User {\r\n    user;// user name\r\n    firstName;\r\n    lastName;\r\n    password;\r\n    mail;\r\n    role;//user type: User or Admin\r\n    completedSurveys = []; // Ids of completed surveys\r\n    assignedCategories = [];// assigned categories names array\r\n\r\n    constructor(user, firstName, lastName, password, mail, role, assignedCategories) {\r\n        this.user = user;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.password = password;\r\n        this.mail = mail;\r\n        this.role = role;\r\n        this.assignedCategories = assignedCategories;\r\n    }\r\n}\r\n\r\nexport class Survey {\r\n    id;\r\n    name;\r\n    category;\r\n    deleted;\r\n    questions = [];\r\n\r\n    constructor(id, name, category, questions) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.category = category;\r\n        this.questions = questions;\r\n        this.deleted = false;\r\n    }\r\n}\r\n\r\nexport class Question {\r\n    question;\r\n    answers = [];\r\n\r\n    constructor(question, answers) {\r\n        this.question = question;\r\n        this.answers = answers;\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Survey, Question } from '../classes/classes.js';\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class CreateSurveyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyName: \"\",\r\n            questionName: \"\",\r\n            answerName: \"\",\r\n            questionArr: [],\r\n            answerArr: [],\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Create New Survey</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ paddingBottom: \"15px\" }} className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadCategories()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <input id=\"surveyName\" className=\"inputStyle\" onChange={this.setSurveyName} type=\"text\" placeholder=\"Survey Name\" />\r\n                            </div>\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"input-group\">\r\n                                    <input id=\"questionName\" type=\"text\" className=\"form-control\" onChange={this.setQuestion} placeholder=\"Add Question\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon2\" />\r\n                                    <button onClick={() => this.addQuestion()} id=\"addQuestion\" className=\"btn btn-success\">+</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"input-group\">\r\n                                    <input id=\"answerName\" type=\"text\" className=\"form-control\" onChange={this.setAnswer} placeholder=\"Add Answers to Question\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon2\" />\r\n                                    <button onClick={() => this.addAnswer()} id=\"addAnswer\" className=\"btn btn-success\">+</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row margin-bottom\">\r\n                            <div className=\"col-12\">\r\n                                <button onClick={() => this.submitSurvey()} className=\"btn btn-info buttonStyleWidth\">Submit Survey</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //add the new survey\r\n    submitSurvey = () => {\r\n        //if the survey name input is blank\r\n        if (this.state.surveyName === '')\r\n            document.getElementById(\"surveyName\").style.border = \"2px solid red\";\r\n\r\n        else {\r\n            document.getElementById(\"surveyName\").style.border = \"none\";\r\n            let category = document.getElementById(\"category\").value;\r\n\r\n            //if the admin didn't choose a category\r\n            if (category === \"Choose Category\")\r\n                alert(\"You need to choose a category\");\r\n\r\n            //if the admin didn't add any questions\r\n            else if (this.state.questionArr.length === 0)\r\n                alert(\"You didn't add any questions to the survey\");\r\n\r\n            //the admin chose a category and added question/s that has answers already\r\n            //No need to check here if the questions have answers because it will be checked on addQuestion function\r\n            else {\r\n                let newSurveyId;\r\n                if (this.props.length === 0)\r\n                    newSurveyId = 0;\r\n                else\r\n                    newSurveyId = this.props.surveys[this.props.surveys.length - 1].id + 1;\r\n\r\n                let survey = new Survey(newSurveyId, this.state.surveyName, category, this.state.questionArr);\r\n                this.props.addSurvey(survey);\r\n                document.getElementById(\"surveyName\").value = \"\";\r\n                alert(\"Survey added successfully!\");\r\n\r\n                //change states to default ones so the admin can add more surveys\r\n                this.setState({ surveyName: \"\", questionArr: [] });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //add question to the questions array\r\n    addQuestion = () => {\r\n        //if the question name input is blank\r\n        if (this.state.questionName === '')\r\n            document.getElementById(\"questionName\").style.border = \"2px solid red\";\r\n\r\n        else {\r\n            document.getElementById(\"questionName\").style.border = \"1px solid #ced4da\";\r\n\r\n            //if the admin added less then 2 answers to the question\r\n            if (this.state.answerArr.length <= 1)\r\n                alert(\"You need to add minimum 2 answers to the question\");\r\n\r\n            //else the admin added 2 answers or more to the question\r\n            else {\r\n                let question = new Question(this.state.questionName, this.state.answerArr);\r\n                let tempQuestionArr = this.state.questionArr;\r\n                tempQuestionArr.push(question);\r\n                document.getElementById(\"questionName\").value = \"\";\r\n                alert(\"Question added with answers!\")\r\n                //set the states of answers array and question name back to default to add more questions\r\n                this.setState({ questionArr: tempQuestionArr, questionName: \"\", answerArr: [] });\r\n            }\r\n        }\r\n    }\r\n\r\n    //add answer to the answer array\r\n    addAnswer = () => {\r\n        //if the answer name input is blank\r\n        if (this.state.answerName === '')\r\n            document.getElementById(\"answerName\").style.border = \"2px solid red\";\r\n\r\n        //else push the answer to answer array\r\n        else {\r\n            document.getElementById(\"answerName\").style.border = \"none\";\r\n            let tempAnswerArr = this.state.answerArr;\r\n            tempAnswerArr.push(this.state.answerName);\r\n            document.getElementById(\"answerName\").value = \"\";\r\n            alert(\"Answer added!\");\r\n            //set the state of answer name back to default to add more answers;\r\n            this.setState({ answerArr: tempAnswerArr, answerName: \"\" });\r\n        }\r\n    }\r\n\r\n    //load categories to dropdown\r\n    loadCategories = () => {\r\n        return (\r\n            <select id=\"category\">\r\n                <option hidden>Choose Category</option>\r\n                {this.props.categories.map((categ, i) => { return <option key={i}>{categ}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    setSurveyName = (e) => {\r\n        this.setState({ surveyName: e.target.value });\r\n    }\r\n\r\n    setQuestion = (e) => {\r\n        this.setState({ questionName: e.target.value });\r\n    }\r\n\r\n    setAnswer = (e) => {\r\n        this.setState({ answerName: e.target.value });\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport *  as ROUTES from '../constants/routes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class AssignCategories extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropSelectedUser: \"Choose User\",//dropdown selected user\r\n            path: \"\",\r\n            changePage: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.doRedirect()}\r\n                <div id=\"box\" className=\"row loginSheet\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div style={{ textAlign: \"left\" }} className=\"col-12\">\r\n                                <button id=\"disc-style\" className=\"link-style\" onClick={() => this.changePathToGo(ROUTES.ADMIN)}>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"new-display-4\">Assign Categories</h1>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ paddingBottom: \"12px\" }} className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadUsersDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.loadCategories()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {this.addAssignButton()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Show button only if the admin selected a user\r\n    addAssignButton = () => {\r\n        if (this.state.dropSelectedUser !== 'Choose User')\r\n            return (<button style={{ marginTop: \"10px\" }} onClick={() => this.assignCategories()} className=\"btn btn-info\">Assign Categories to {this.state.dropSelectedUser}</button>);\r\n    }\r\n\r\n    //Assign categories to the chosen user\r\n    assignCategories = () => {\r\n        //temp category names array\r\n        let tempCategoriesArr = [];\r\n\r\n        //go through all of the categories\r\n        for (let i = 0; i < this.props.categories.length; i++) {\r\n            //if the corresponding checkbox is checked, then push to array the name of the category\r\n            if (document.getElementById('c' + i).checked)\r\n                tempCategoriesArr.push(document.getElementById('n' + i).innerHTML);\r\n        }\r\n\r\n        //find the index of the user based on the chosen user name\r\n        let indexSelectedUser = this.props.findUserbyUserName(this.state.dropSelectedUser);\r\n\r\n        //update the user's assigned categories the new categories\r\n        this.props.updateAssignedCategories(tempCategoriesArr, indexSelectedUser);\r\n        alert('Assigned new categories to ' + this.state.dropSelectedUser + ' successfully!');\r\n    }\r\n\r\n    //load categories with checkbox to the screen\r\n    loadCategories = () => {\r\n        //if the admin didn't choose any user, then a message will be shown\r\n        if (this.state.dropSelectedUser === 'Choose User')\r\n            return (<h1 className=\"header-style\">Choose a user to assign categories</h1>);\r\n\r\n        else\r\n            return (\r\n                <table className=\"mx-auto\">\r\n                    <tbody>\r\n                        {this.addCategories().map(categ => { return categ })}\r\n                    </tbody>\r\n                </table>\r\n\r\n            );\r\n    }\r\n\r\n    //return an HTML array that has all categories with checkbox\r\n    addCategories = () => {\r\n        let categoriesArr = [];\r\n        for (let i = 0; i < this.props.categories.length; i++) {\r\n            categoriesArr.push(\r\n                <tr key={i}>\r\n                    <td className=\"padding-table pad-checkbox\"><input id={\"c\" + i} type=\"checkbox\" /></td>\r\n                    <td><h4 id={\"n\" + i} className=\"autoBr\">{this.props.categories[i]}</h4></td>\r\n                </tr>\r\n            );\r\n        }\r\n        return categoriesArr;\r\n    }\r\n\r\n    //load the dropdown with all users except the admin\r\n    loadUsersDropdown = () => {\r\n\r\n        let usersOnlyArr = this.props.users.filter((person) => person.role === 'User');\r\n        return (\r\n            <select id=\"usersDropdown\" onChange={() => this.setDropSelectedUser()}>\r\n                <option hidden>Choose User</option>\r\n                {usersOnlyArr.map((person, i) => { return <option key={i}>{person.user}</option> })}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    clearCheckboxes = () => {\r\n        for (let i = 0; i < this.props.categories.length; i++)\r\n            document.getElementById(\"c\" + i).checked = false;\r\n    }\r\n\r\n    //get the chosen user and put it in a state\r\n    setDropSelectedUser = () => {\r\n        if (this.state.dropSelectedUser !== 'Choose User')\r\n            this.clearCheckboxes();\r\n\r\n        this.setState({ dropSelectedUser: document.getElementById(\"usersDropdown\").value });\r\n    }\r\n\r\n    //redirect to another page\r\n    doRedirect = () => {\r\n        if (this.state.changePage)\r\n            return <Redirect to={this.state.path} />\r\n    }\r\n\r\n    changePathToGo = (newPath) => {\r\n        this.setState({ path: newPath, changePage: true });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\nimport UserPage from './components/UserPage';\nimport UserInfo from './components/UserInfo';\nimport AllSurveysPage from './components/AllSurveysPage';\nimport SurveyPage from './components/SurveyPage';\nimport CouponPage from './components/CouponPage';\nimport AdminPage from './components/AdminPage';\nimport NewCategory from './components/NewCategory';\nimport AdminEditUsers from './components/AdminEditUsers';\nimport EditSurveyPage from './components/EditSurveyPage';\nimport CreateSurveyPage from './components/CreateSurveyPage';\nimport AssignCategories from './components/AssignCategories';\nimport './cssFiles/loginPage.css';\nimport './cssFiles/userPage.css';\nimport './cssFiles/surveyPage.css';\nimport './cssFiles/createPageStyle.css';\nimport './cssFiles/editSurveysStyle.css';\nimport './cssFiles/assignCategoriesStyle.css';\nimport *  as ROUTES from './constants/routes';\nimport { User, Survey, Question } from './classes/classes.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //all the users, surveys, categories\n    this.state = {\n      users: [\n        new User('tomer', 'Tomer', 'Steiner', '1234', 'aaaa@gmail.com', 'User', ['Music', 'Sport']),\n        new User('ram', 'Ram', 'Maian', '4321', 'bbbb@walla.com', 'User', ['Music', 'Sport']),\n        new User('jon', 'Jon', 'Snow', '1111', 'cccc@gmail.com', 'Admin', ['Music', 'Sport'])\n      ],\n\n      surveys: [\n        new Survey(0, 'Basketball', 'Sport',\n          [new Question('Do you like this sport?', ['Very much', 'I do but not a lot', 'Not at all']),\n          new Question('Do you know the rules?', ['Yes', 'No']),\n          new Question('Would you recommend someone to watch a game?', ['Yes I would', 'Maybe', 'No I wouldn\\'t'])])\n        ,\n        new Survey(1, 'Queen band', 'Music',\n          [new Question('Do you know their songs?', ['I know every song they made', 'I know some but not all', 'I am not familiar with their songs'])])\n        ,\n        new Survey(2, 'Music in general', 'Music',\n          [new Question('Do you hear music often?', ['Every time', 'Sometimes', 'Rarely']),\n          new Question('Are you proficient in the music industry', ['Yep, I am', 'Nope, I am not']),\n          new Question('In what types of headphones do you like to hear music?', ['In ear', 'On ear', 'Around ear'])])\n      ],\n\n      categories: ['Music', 'Sport']\n    }\n  }\n\n  //get a categories array and update the assigned categories of a user to that array\n  updateAssignedCategories = (tempCategoriesArr, indexSelectedUser) => {\n    let tempUsers = this.state.users;\n    tempUsers[indexSelectedUser].assignedCategories = tempCategoriesArr;\n    this.setState({ users: tempUsers });\n  }\n\n  //get the updated survey and the index of the survey you want to update to and update it\n  updateSurvey = (updatedSurvey, surveyIndex) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys[surveyIndex] = updatedSurvey;\n    this.setState({ surveys: tempSurveys });\n  }\n\n  //get a survey index and the delete it\n  deleteSurvey = (surveyIndex) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys[surveyIndex].deleted = true;\n    this.setState({ surveys: tempSurveys });\n  }\n\n  //update a user\n  updateUser = (indexUser, userName, firstName, lastName, mail) => {\n    let tempUsers = this.state.users;\n    tempUsers[indexUser].user = userName;\n    tempUsers[indexUser].firstName = firstName;\n    tempUsers[indexUser].lastName = lastName;\n    tempUsers[indexUser].mail = mail;\n    this.setState({ users: tempUsers });\n  }\n\n  //change the completed survey of a user to checkedSurvey(the one the function gets)\n  pushCompletedSurvey = (checkedSurvey, loggedUserIndex, indexSurvey) => {\n    let tempUsers = this.state.users;\n    tempUsers[loggedUserIndex].completedSurveys.push({ indexOfSurvey: indexSurvey, resultSurvey: checkedSurvey, couponRedeemed: false });\n    this.setState({ users: tempUsers });\n  }\n\n  //return the index of a user given his user name or '-1' if not found\n  findUserbyUserName = (userName) => {\n    for (let i = 0; i < this.state.users.length; i++)\n      if (this.state.users[i].user === userName)\n        return i;\n    return -1;\n  }\n\n  //return the index of a survey given his survey id or '-1' if the survey not found\n  findSurveyIdInCompletedArr = (surveyId) => {\n    let loggedUserIndex = localStorage.getItem('loggedUserIndex');\n    for (let i = 0; i < this.state.users[loggedUserIndex].completedSurveys.length; i++)\n      if (this.state.users[loggedUserIndex].completedSurveys[i].indexOfSurvey === surveyId)\n        return i;\n    return -1;\n  }\n\n  //add a new category to categories array\n  addNewCategory = (newCategory) => {\n    let tempCategories = this.state.categories;\n    tempCategories.push(newCategory);\n    this.setState({ categories: tempCategories });\n  }\n\n  //add a new survey to surveys array\n  addSurvey = (survey) => {\n    let tempSurveys = this.state.surveys;\n    tempSurveys.push(survey);\n    this.setState({ surveys: tempSurveys });\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n\n          {/* all routing pages */}\n          <Switch>\n            <Route exact path={ROUTES.LOGIN} render={(props) => <LoginPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.USER} render={(props) => <UserPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.USER_INFO} render={(props) => <UserInfo {...props} users={this.state.users} updateUser={this.updateUser} />} />\n            <Route exact path={ROUTES.ALLSURVEYS} render={(props) => <AllSurveysPage {...props} users={this.state.users} surveys={this.state.surveys} categories={this.state.categories} findSurveyIdInCompletedArr={this.findSurveyIdInCompletedArr} />} />\n            <Route exact path={ROUTES.SURVEYPAGE} render={(props) => <SurveyPage {...props} users={this.state.users} surveys={this.state.surveys} pushCompletedSurvey={this.pushCompletedSurvey} findSurveyIdInCompletedArr={this.findSurveyIdInCompletedArr} />} />\n            <Route exact path={ROUTES.COUPONPAGE} render={(props) => <CouponPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.ADMIN} render={(props) => <AdminPage {...props} users={this.state.users} />} />\n            <Route exact path={ROUTES.NEW_CATEGORY} render={(props) => <NewCategory {...props} addNewCategory={this.addNewCategory} />} />\n            <Route exact path={ROUTES.ADMIN_EDIT_USERS} render={(props) => <AdminEditUsers {...props} users={this.state.users} updateUser={this.updateUser} findUserbyUserName={this.findUserbyUserName} />} />\n            <Route exact path={ROUTES.CREATESURVEY} render={(props) => <CreateSurveyPage {...props} surveys={this.state.surveys} categories={this.state.categories} addSurvey={this.addSurvey} />} />\n            <Route exact path={ROUTES.EDITSURVEY} render={(props) => <EditSurveyPage {...props} surveys={this.state.surveys} categories={this.state.categories} deleteSurvey={this.deleteSurvey} updateSurvey={this.updateSurvey} />} />\n            <Route exact path={ROUTES.ASSIGN_CATEGORIES} render={(props) => <AssignCategories {...props} users={this.state.users} categories={this.state.categories} findUserbyUserName={this.findUserbyUserName} updateAssignedCategories={this.updateAssignedCategories} />} />\n          </Switch>\n\n        </Router>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}